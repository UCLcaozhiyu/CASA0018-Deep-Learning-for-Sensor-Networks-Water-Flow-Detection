/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 22.04.2025 20:52:55

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 12
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 18848;
#else
constexpr int kTensorArenaSize = 17824;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,7760 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 97, 80, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 97, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 49, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 49, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 25, 16, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 25, 1, 32, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data7[2] = { -1, 416, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data8[2] = { -514, 514, };
const TfArray<1, int> tensor_dimension8 = { 1, { 2 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0011176173575222492, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[2*64] = { 
  -48, -126, 94, -51, 19, 35, -57, -13, -31, -93, 80, -18, 31, -36, -6, 18, 42, -36, -35, 52, 43, 12, -16, -22, -16, -68, 64, 37, 11, -5, 22, -87, -10, -5, -71, 44, -4, 57, 38, 71, 76, 27, 28, 108, 24, 23, -108, 44, -33, 56, -2, 32, 127, 48, 38, -55, 4, 24, 18, 0, 51, 74, 5, 30, 
  -45, 38, 6, -49, -20, -31, 22, -16, -47, -44, -10, 75, -46, 65, -40, 71, -19, -54, -12, -66, 42, -3, 74, -32, -69, -38, -43, 54, 81, -31, 26, -17, -55, -113, -74, -61, -13, -5, -19, 18, -73, 36, 58, 24, 50, -86, -8, -15, -31, -68, -26, -4, -16, 30, 73, 80, -23, -1, -8, 42, 2, -86, 21, 91, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 2,64 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0035643815062940121, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[64] = { -54, 896, -331, -467, -189, -110, 631, -140, -129, -72, -277, 762, -329, -259, -227, 214, -400, -350, 208, -275, -312, -164, -223, 138, -316, -139, -200, -127, 787, -248, -89, 209, -159, -245, -164, -222, -84, -341, -281, -109, -236, -175, -360, -271, -316, -221, 596, -207, -74, -188, -71, -121, -284, -139, -231, 719, -907, -104, -185, -150, -69, -314, -411, 152, };
const TfArray<1, int> tensor_dimension10 = { 1, { 64 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0011334456503391266, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[64*416] = { 
  -9, -2, 5, -2, -8, 2, 12, -2, -10, -7, 1, -1, -6, 0, -3, -1, -16, -19, -2, -3, -7, -10, -14, -6, -6, -6, -7, -10, 1, -12, 0, 6, -4, -1, -2, -2, -6, 0, 16, -8, -9, -12, 3, -2, -5, -4, -6, 7, 11, 14, 5, -9, 0, 10, 14, 0, 16, -5, -4, -8, -16, -13, 1, 3, -9, -11, -6, -5, -15, -2, 2, -8, 0, -2, 3, 13, -1, -11, -5, 3, -5, 11, 3, -6, -12, 2, 1, 3, -3, -10, -2, 1, -6, -18, -2, -7, -7, -3, 2, -6, -1, -8, 5, 3, 2, -14, -6, -12, -7, 0, -13, 0, -4, 24, 1, -12, -2, -1, -6, 1, -15, -9, -10, -5, -4, -1, -7, -7, -17, -17, -2, -9, 2, -5, 6, -7, -7, -11, -5, -8, -3, 5, -6, -7, -11, -7, 0, -9, -9, 7, -11, -4, -11, -10, -1, -6, 3, -19, -7, -11, 0, 1, -4, 9, -7, -6, 13, -10, -3, -12, -2, -5, -6, -2, -5, 0, -13, -4, -2, -11, -7, -2, -24, 0, -7, -2, -11, -14, 4, -6, -3, 0, -2, -8, 1, -3, -8, -6, 12, 5, -5, -4, 0, -2, 1, -2, 0, 0, -5, 9, -3, 7, -18, -7, 14, -5, -9, -8, -3, -9, -9, -9, -4, 8, -10, -12, 4, 8, 4, -6, 5, -10, 2, -1, -4, 15, -4, -4, 8, 0, 3, 16, -4, -12, -14, 1, 18, 2, -3, -18, 0, -2, -2, -10, -11, 5, -12, -21, -1, 2, -15, -1, 13, 7, 5, 1, -2, 18, -6, -5, -5, -6, 19, 30, -5, -12, -3, 0, 17, 1, -6, -13, -3, 18, -4, -12, 4, 1, -18, -2, -4, -5, -6, -1, 7, 7, -3, -7, 3, 14, 11, 0, -6, -4, -5, 14, -2, -6, -6, -1, -2, -5, 6, -6, -1, -2, -2, -6, -5, -8, -16, 8, -1, -8, 3, 6, 11, 4, -5, 0, 2, -4, 0, 5, -14, 2, -8, 1, 4, -11, 7, 1, -17, -1, -12, -10, -5, -13, 6, -2, -6, 2, -3, 0, 6, -6, -8, 4, 22, -11, -14, -10, -2, -14, -2, -5, -14, -6, -9, -20, 5, -5, 10, -7, -24, -4, -9, -8, 4, -14, 12, -2, -11, 2, -8, -2, 2, -13, -4, -1, 8, -4, -18, 3, -5, -16, 8, -5, 1, -3, -2, -14, -3, 2, 0, 0, -14, -5, -13, -16, -9, -11, 4, 14, -1, -9, 
  -13, -1, 37, -5, -18, -8, 0, 14, -21, 5, 2, -25, 11, -4, 9, -8, -19, -4, -4, -24, -5, 27, -4, 10, -14, 38, -12, -1, 2, 23, 8, -7, -3, -6, 21, -8, -7, -3, 10, 12, -47, 2, -9, -7, -1, -8, 5, 6, -16, -26, -6, 9, 3, 16, -26, 10, -16, 15, 8, -10, 3, -12, -2, 2, -11, 11, 15, 8, 8, 7, 2, 12, -20, -6, -3, -6, 8, -10, 3, -3, 4, -5, 3, -8, 2, 1, 1, 1, -11, 13, 5, -3, 21, -20, 4, 3, -5, 3, 2, 25, 35, -3, 6, 11, -52, 13, -6, -20, 3, 0, 2, 4, -23, -59, -2, -16, 3, -1, 5, -6, -21, 11, -3, -30, 11, 11, 7, 8, -3, 15, 12, 16, 10, -6, 9, -14, -12, 5, -6, -32, 3, -7, 14, 1, -31, -42, -3, -23, -3, 23, 8, 0, -12, 15, -6, -30, 9, 22, 1, -11, -17, 9, 6, 19, -3, -1, -6, 1, -8, 36, -1, -13, 6, -7, 5, 20, -24, -15, -3, -1, 16, 22, -35, -9, -10, 5, -1, -31, 4, 0, 2, 4, -18, 4, 2, 18, -3, -14, 0, 5, -24, 7, -3, -8, 3, -8, 4, 14, -5, 7, -1, 17, -4, 20, -19, 2, -17, 12, 2, -2, -13, 3, 15, -6, -10, 13, 6, 2, 3, -4, 9, -4, 3, 7, 5, -7, 9, -11, -1, 0, -25, 10, -6, -30, 6, 14, 11, 0, -20, 13, -5, -31, -4, -2, 8, -9, 8, -8, 0, -3, 4, -8, 10, 3, -34, 2, -9, -20, 0, -10, 13, 11, -22, -16, 4, -5, 5, 17, -38, -8, -4, -9, -1, 2, 0, 9, 13, 9, -13, -21, 4, -13, 7, -13, 3, 5, -33, 17, -10, -15, 3, -1, 5, 2, -38, -40, -10, -20, 15, 9, -10, -6, -36, 19, 2, -20, -13, -1, 5, 0, 0, 6, 8, 8, 23, -1, 15, 10, -20, 31, -6, -27, 3, -4, 18, -10, -25, -21, 1, -18, 8, 14, -22, 0, -31, -17, -14, -35, -5, -3, 8, -10, 1, 13, -2, -16, 21, -1, 13, 1, -27, 18, 3, -30, -1, -9, 28, 14, -33, -32, 2, -20, 35, 8, -50, 10, -24, -8, -6, -37, -7, 11, 2, -2, -22, 35, -6, 7, 15, -2, 10, -1, -48, 2, 0, -24, 4, -8, 6, -11, -32, -49, 4, 43, 26, 28, -17, 21, -13, -11, -2, -37, 8, -5, -3, 4, 
  -12, 5, -29, 3, -32, -5, -2, -12, 17, 2, -7, -3, -1, 0, 4, 11, 7, 11, -5, -5, -10, -3, 23, -4, -11, 12, 3, 17, -16, 2, 4, -11, -23, -11, -19, 7, -25, -2, -2, -8, 23, 5, -1, -8, -4, -7, -5, -2, 32, 8, -4, 9, 10, 2, 30, 2, -12, 0, -7, 23, -5, 0, 4, -2, -7, -8, -8, 23, 34, -3, 1, -3, 14, -13, -7, 14, 5, -5, 17, 15, -7, 29, -3, 9, -6, -3, 39, 2, -19, 13, -2, -2, 18, -11, -7, -9, 16, -5, 13, 11, -6, -8, 11, -13, 50, -14, 0, -51, 2, 2, 1, 4, 3, 55, 2, 1, -6, -14, 46, 5, 8, 13, -1, 11, -13, 2, -10, -5, 25, -29, -2, -9, 13, -3, -2, -3, 32, -32, -5, -29, -1, 2, 8, 17, -2, 20, 1, 20, -21, 14, 7, -4, -5, -2, -5, 11, 18, -12, 1, -9, -3, -2, -3, 4, 0, 2, 0, -13, 23, -9, 2, -9, 2, -7, -21, 5, 11, 50, -2, 21, -18, 0, 8, -2, -13, 7, -15, 2, -5, 1, -6, -12, -8, -11, -2, 8, -52, 2, -4, -5, 34, -11, 3, -31, -4, 2, -4, 8, 16, 29, -3, 21, -32, -1, 21, 3, -57, -15, -27, 13, 9, -4, -12, 1, -16, -3, -12, 8, -7, 2, 3, -4, -17, -31, -6, -7, -7, 0, 3, 1, -12, 12, 0, 35, 1, -3, 14, 2, -2, -1, -16, 6, 26, 2, -1, -5, 16, -2, 15, -1, 15, -5, -6, -2, 30, -9, 3, -35, 6, 0, 13, 9, 1, -8, 0, -6, -5, 27, 36, 12, -42, -6, -1, 28, 3, 6, 7, -4, 0, -25, 5, 15, 7, 1, 1, -5, -2, 0, 0, -24, 1, 0, -6, -7, 8, 6, -4, 3, 12, 2, 8, -2, -44, -20, -7, 19, 11, -1, -11, -3, -10, 13, -3, -1, -35, -7, 6, -4, 21, -28, 0, -28, 0, 8, -4, 5, -3, 35, -4, 8, 0, 22, 34, -2, 25, 11, 10, 15, 2, -13, -4, -11, -7, -10, 8, 7, -32, -5, 2, -4, 33, -12, -6, -20, -1, -7, -18, -10, 11, 15, -3, 20, 0, -6, 18, 4, 10, -7, -14, 7, 7, -1, -6, 1, 1, 1, -14, -12, -11, -3, 3, 4, 4, -32, -5, 5, 3, -13, -7, 1, 11, -3, -4, -21, -25, 5, 6, -10, 25, -53, -6, -8, 4, -4, 2, -21, 
  -17, -18, -3, 13, -17, -2, 1, 9, -5, -7, -1, -29, -2, -1, -1, -1, -13, -4, -2, 30, -20, 2, 2, 0, -127, -20, -1, -8, -15, -18, 1, -2, -21, 0, 6, -5, -6, -2, -2, 1, -13, -3, -3, -20, -1, 0, -12, -6, 13, 27, 5, 7, -7, 1, -2, 3, -54, -6, -9, -11, -12, 11, 4, -5, -17, -1, 0, 15, 7, -4, 0, 4, -3, 0, 0, -15, 6, -5, -2, 3, -15, -2, -3, 1, 2, 6, -16, -2, -115, 5, 2, -18, -9, -3, 1, 0, 1, -11, -1, -27, -20, -4, 1, -7, 7, -15, -2, -18, 2, -2, -2, 3, 4, 17, -5, 16, -2, -15, 14, 4, -34, -1, -17, -17, -14, -20, 1, -1, -10, -18, 6, -11, -13, -2, -5, -1, 10, -8, -1, -21, 6, -4, -7, 4, 3, 29, -3, 4, 4, -3, 10, 3, 0, -12, -8, 15, -9, -9, 0, 3, -18, -4, 1, 16, 0, -8, -3, -4, 11, -5, -3, 12, -7, 5, -14, 3, 2, -3, -5, 11, 8, -15, 20, 5, 15, 0, 6, 24, -19, -17, 4, -1, -17, -13, -1, -26, -7, 4, 1, 8, 16, -11, 6, -26, -8, -3, -1, -3, 8, 2, 0, 12, 7, -13, -4, 7, -43, -21, -13, -4, -8, -25, 4, -4, -10, -3, -5, -15, 6, -6, -3, -6, 12, 4, -3, -16, -7, 1, -6, -2, 23, 11, -1, 0, 13, -8, -2, -6, -42, -6, -14, 7, -16, -21, -4, -2, -10, 0, 3, -7, 8, 3, 4, 6, 1, -16, -11, -15, -6, -1, -14, -9, -12, -1, 2, 19, -3, 7, -10, 4, -109, 4, -9, -2, -2, -15, -2, -3, -7, -35, -4, 6, -2, -1, 1, -3, -11, -2, -3, -15, -1, -1, -7, 0, 10, 17, 3, 21, -8, -13, -3, -1, -58, 4, -9, 3, -7, -12, 0, -2, -22, -45, -3, 0, -9, 1, 1, 10, 39, -22, 0, -22, -7, -2, -12, -4, 28, 22, -5, 1, -2, -18, 5, 0, -46, 2, -5, 4, -8, -19, 3, -5, -7, -22, 7, 11, 2, 0, 1, -4, -18, -13, -1, -11, 0, -5, -12, 1, -11, -12, 2, 14, 11, -13, -18, -3, -61, -18, -11, -25, 0, -9, 2, 5, -19, -43, 4, -35, 3, 0, 3, 10, -2, 0, -3, 6, 0, 4, -7, -4, -16, 4, 1, 10, -7, -6, -20, 11, -14, -7, -9, 15, -3, -8, 2, 3, 
  2, 5, 1, -4, -13, -4, -5, 14, -4, 17, -1, -4, 0, 1, 8, -4, -6, -3, -3, -15, 14, 1, -6, -11, 3, 13, 4, -12, -3, -15, 7, 5, -6, 0, 18, 11, -8, 11, -3, -1, 15, -2, 6, -4, -9, -9, -4, -1, 1, 4, 1, -11, 18, 6, -9, 3, -3, -11, 6, -5, 6, 0, -6, -6, -20, -7, 1, -3, -4, -7, 1, -5, -14, -6, 7, -20, -1, 0, 8, 2, -26, 1, 4, 8, -9, 1, -3, -14, -20, -12, -3, -15, 4, -4, -8, -8, -9, -26, 1, 2, -9, -10, -14, -13, -16, -7, 9, -11, 6, -3, 6, -5, 0, 7, -6, -2, -27, 7, -12, -11, 0, -21, -2, -4, -18, -17, -8, 1, -20, -22, -4, -17, 5, -27, -2, -7, -15, -16, -10, -15, 1, -4, -4, 2, -14, -4, -4, -3, -17, 0, -11, 1, 9, -20, -4, -16, -18, -11, 0, -3, -21, -25, -3, 0, -10, -3, 6, -7, 9, -10, -13, -12, -7, -4, -6, 0, -26, -4, 2, -11, -3, 3, -14, -11, -4, -17, -1, 0, -6, -8, 1, -5, 4, -22, -2, -8, -17, -7, 6, -5, -6, -9, -5, -4, 6, -3, -9, -9, 2, -1, 2, -3, -15, 12, -2, -10, -10, -1, -2, 4, 1, -21, 9, -5, -6, -3, 5, 15, -4, 6, -5, -4, 9, -3, -11, 2, -2, -5, -11, -3, 0, 1, -1, -4, -10, 7, 6, -6, 17, 0, -3, 10, 6, -3, -6, 0, 8, -14, -2, -1, -16, -8, -18, 1, 2, -15, 5, -9, 3, -4, 11, 4, 5, 32, -7, -5, -1, 4, 12, 12, -1, -9, 5, 9, -1, -15, -6, -3, -18, 3, 1, 18, -19, 0, -7, -13, 5, -6, 2, 0, -6, -7, -8, -1, -4, 14, 3, -11, -9, 1, 17, -2, 6, -14, 2, 2, 5, -13, -3, 2, -13, 6, -11, -6, -7, 5, 4, -3, 0, -15, 3, 4, -3, 3, -9, -3, -3, 8, 2, -14, -14, -1, -7, 3, -4, -1, 14, 4, -1, -17, -6, -4, -15, -15, 9, -17, -16, 2, -1, -7, 14, -6, -1, 9, 2, -1, -5, -6, 3, 15, -2, -7, -9, -4, 5, -2, 12, 1, 13, 21, -2, -7, 0, -11, 2, -6, -5, 16, 6, -7, 5, -9, 2, -13, -4, -13, 1, 3, 3, 2, -19, 5, 1, -19, -14, -9, -10, -4, -10, 15, 3, -6, -1, 17, 5, -8, 
  -6, 3, 3, 0, -5, 0, 2, 11, -8, -9, 1, -6, -7, -4, -7, -5, -7, -8, 0, -5, -7, -4, -5, -4, -2, -4, 1, -5, 4, -1, 2, -8, -3, -2, 6, 5, -3, 0, 4, -2, 0, -5, 0, -5, -5, 4, -6, 2, -1, -5, 4, 5, -3, -5, -5, 0, -3, -1, 1, -4, 1, -6, 3, 3, -4, -2, -3, -1, -6, -2, 1, 0, 4, -8, 5, -1, -2, 4, -12, -3, -5, -5, 3, 1, -9, -4, 2, 5, 1, 6, 6, -2, -6, -1, 3, 2, 0, 4, 1, 7, -1, -4, 1, 4, 0, 1, 0, 3, -12, 4, -3, -1, -4, -5, -4, -1, -2, 3, -6, 0, 2, -2, -5, -19, 3, -6, 1, 5, 2, -2, 2, 0, 3, 0, 1, -5, -7, -10, 4, 2, -8, 3, -5, -7, -5, -4, -3, -4, -6, 4, -3, 0, 2, 3, -3, 0, 1, -1, 3, 0, -5, -4, 2, 3, -5, -5, -4, 2, 3, 1, -2, 4, -9, 0, -3, 3, 2, 2, -2, -4, -6, -6, -7, 1, 3, -1, -1, -6, 3, -3, 5, 6, -4, 2, 0, 7, -2, -3, 2, 4, -3, -2, 3, -6, -4, -5, -5, -3, -3, -13, -2, 0, -3, 2, 1, 5, -2, 4, 0, -4, -5, -1, -1, 6, -6, -6, 3, -1, -4, -1, 4, -3, 2, -10, 6, 1, -4, -1, -4, -2, 2, -3, -5, -4, -3, 0, -6, -6, -2, -1, 1, -1, 1, -7, 6, -4, -1, -9, 3, 3, -2, -2, -4, 2, -5, -2, 4, 3, -1, -4, 2, -2, -1, -2, -1, -3, -1, -3, 5, 2, 1, 0, -1, -2, 0, 0, 6, 4, -5, -6, -1, -3, -1, -4, 0, 8, -3, -8, -3, -1, 1, 2, -6, -4, -5, 2, 5, 0, -5, -3, -1, 4, 4, 1, -5, -2, 2, -5, 0, 5, 1, -9, -4, -1, -3, 1, 6, 3, -2, 0, -2, -2, -12, 4, -10, -6, -2, 0, 3, -7, -12, 1, -2, 5, 0, 2, -2, -9, 0, -5, 2, -1, -1, -3, 5, -4, -4, -7, 4, -6, -13, -6, 0, 1, 4, 2, -2, 5, -5, -3, 0, -7, -8, 6, -9, 1, -4, 4, -2, -5, 2, -10, 4, -5, 0, 4, 2, 6, -5, 3, 1, -5, 0, -4, -1, -2, 2, 2, -3, 3, -14, -4, 5, 3, -7, 4, -7, -2, -2, -1, 5, -7, 5, 3, -3, -10, 
  3, 7, 23, 0, 11, 0, 9, 14, -46, 12, 1, -18, 12, 4, 6, 2, -43, -40, -5, -27, 11, 11, -23, 7, -31, -1, -1, -27, 14, 9, -3, 2, 4, 2, 27, 3, 16, -5, 4, -2, -8, 14, -7, -5, 1, 2, 17, 16, -50, -9, 0, 3, 13, 4, -28, 12, -24, -7, -3, -20, -2, 5, 6, 0, 25, -7, 14, 5, -5, 9, 0, -6, -11, -10, -6, -10, -1, 3, 11, 6, -7, -18, 2, 5, -5, 4, 13, 12, -23, -8, -2, -11, 12, 1, -5, -1, 2, 4, 22, 14, -3, -8, 1, -6, -35, -14, 4, -6, -3, 0, 5, 9, 0, 4, -5, 10, 8, 4, -14, 11, -15, -9, 6, -23, -5, 14, -6, 8, 0, -3, 10, 7, -15, -4, 6, -5, 5, -13, 1, -9, -2, 0, 6, 0, -1, -17, -3, 1, 0, 4, -4, 9, 7, -9, 5, -7, 0, -10, 2, 1, 8, -9, 12, 9, 9, 1, 7, -3, -10, 2, 0, -1, -7, 4, 1, 11, -19, 6, -3, -21, 15, 1, -3, 1, 9, -5, 3, -6, 1, -16, -5, 5, -1, 9, 18, -8, 6, -2, 6, 7, -13, -2, 2, -1, -6, 3, -19, 7, -25, -10, 2, -15, 7, 1, -5, 2, 9, -2, -4, -36, 13, 12, 0, -9, -5, 3, 13, -11, 36, -3, -2, -5, -14, -10, 4, -8, -2, -5, -19, 7, -15, -16, -2, -22, 5, 5, -8, -3, -10, -13, 7, -14, 9, -13, -5, -3, 1, -2, 14, 1, 9, 0, 8, -2, -24, 15, 4, 0, -6, 0, 20, 10, -46, -11, -2, -17, -6, -14, -27, 10, -9, -10, 1, 0, -5, -4, 6, -2, -12, -7, 2, -15, 4, 1, 1, 6, -11, 5, -6, 4, -2, 4, -13, -3, -12, -21, -8, 7, 12, 11, -12, 2, -4, 17, -6, -30, -7, 1, 4, -3, -3, -7, 16, -7, 4, 2, 1, 12, -19, 30, 5, -9, -3, 3, 30, 6, -29, -36, -1, -20, 5, -5, -38, 6, -8, 4, -10, -35, 14, 6, 2, 0, -7, 15, 21, -8, 3, 3, -3, 3, -24, 21, 3, -5, 2, 2, 9, 11, -13, -15, 3, 11, 7, -1, -24, 2, -16, 9, -9, -20, 4, 0, 15, -3, -15, 47, -2, 16, 40, 0, 5, -1, -28, -6, -8, -3, 1, -5, 24, -7, -20, -21, 1, 4, 4, 23, -14, 12, -1, 24, 1, -10, 3, 15, 2, 3, 
  -18, 5, 5, 3, 1, -5, -5, -4, -17, -6, 1, -3, 2, -6, -7, 2, -12, -15, -3, -8, -9, -1, -19, 2, -6, 1, 0, -13, 5, 2, -4, -2, -18, 3, 5, -11, -4, -4, -10, 3, -11, -17, 3, 4, -2, -1, -9, -1, 4, -6, 4, -9, -11, 1, -4, 0, -11, -14, -3, -6, -2, -6, 3, -2, -3, -6, 3, -3, 2, 1, -2, -4, -14, -2, -6, -10, 4, 3, -8, 2, 0, -7, 5, 5, -2, -1, -4, 5, 2, -4, -6, -12, 2, -1, -3, 2, -4, -10, 0, 0, -7, 1, -4, -4, 2, -7, -1, 4, -3, 4, -8, -6, -7, 4, -5, -6, -4, 3, 2, 0, 4, -2, 4, -9, -4, -13, 0, 1, -17, 1, -5, 0, 7, -12, -4, -3, -2, -20, 3, 5, -5, -3, -12, -5, 8, 4, 2, -15, -13, -2, -4, -7, 1, -5, 0, 10, -14, -9, 1, -1, -23, -1, 3, -10, -3, -10, -8, -9, -4, -7, 1, -3, -7, 0, -4, 0, -6, 2, -5, -4, -8, -1, -3, -1, 1, 0, 1, -5, -20, -8, -3, 2, -11, -12, -2, -2, -2, -10, -4, -7, -7, -12, -5, 4, -7, 2, -6, -1, -7, 9, -5, 3, -17, 2, 7, 5, 1, -10, -9, 0, -20, 15, 3, 4, -4, 1, -1, -7, -2, 1, -4, 2, -11, 1, 4, -11, 3, 5, -11, 1, -16, -4, 0, 21, -8, -3, 0, 2, -9, -2, -5, -15, 5, -1, -1, 4, -16, -6, 0, 2, -14, -4, 3, -5, -10, -3, -1, -5, 0, -3, -8, 3, 6, -11, -5, -8, 3, 5, -15, 11, -3, -8, -2, -4, -1, -8, -2, -3, -6, -11, -1, 9, -2, 7, -5, -4, -13, -8, -2, -6, -2, 0, -9, -2, -15, -8, 0, -19, -7, -3, -5, 10, -7, -11, -5, -4, 2, -4, 2, 0, -3, -3, 2, -6, -2, -2, -4, 0, -14, -18, 5, -14, 0, -3, -8, -1, -11, -8, 0, -2, -4, 2, -7, 6, -7, -9, 5, -21, -6, -8, -6, -8, -13, 7, 7, -2, -3, 6, -7, -10, -18, -14, -4, -8, -2, 0, -7, -1, -11, -6, -5, -12, -4, 0, -12, 3, -5, -9, 0, -18, 7, -7, -5, 0, 4, -14, -1, -3, -5, 1, -7, -4, -7, 1, 1, -5, 3, 0, -4, 2, -14, -15, 6, 9, 7, -1, -11, 5, -6, -1, -8, -18, -2, -7, 6, 0, 
  -16, -1, 9, 13, -10, -1, -5, 10, -13, -8, -4, -11, 14, 2, -8, -4, -16, -17, 4, -1, 2, 5, -22, -3, -2, -3, -10, -10, 4, -5, 1, 0, -9, 2, 8, -6, -15, 1, 0, -10, -10, -1, -15, -12, 5, -2, 0, 3, -13, -10, 1, -23, -5, -8, -21, -5, -13, -9, 1, -13, 3, -12, 0, -5, -4, 4, -6, -13, -8, 3, -11, -1, -1, 2, 0, -4, -2, -1, -17, -1, 2, -6, 1, -10, 1, 0, -4, 7, -10, -2, 4, -14, -2, -6, -2, 2, -9, -3, 2, -2, -6, -2, -5, -2, -1, -9, -4, -1, -6, -5, -18, 0, 4, -10, -4, -6, -9, -6, -10, -1, 0, -10, 2, -14, -6, -11, -6, -4, 2, -3, 1, -3, -17, -3, -4, 6, 1, -4, -4, 1, 0, -2, -9, -6, -1, -4, -5, 15, 0, 5, 0, 11, -6, -12, 0, -13, 0, -14, 3, -4, -2, -1, 1, -3, -10, -4, -9, 0, -1, -9, -8, -11, 2, 4, -9, -4, -6, -4, -1, -15, -8, -4, 1, 7, -10, -3, -3, -6, 10, -4, 0, -1, -4, 10, 10, 4, -31, -5, -4, 4, -19, -7, 5, -3, 7, -5, -20, 5, 0, -10, -6, -6, -13, -7, -10, 5, -2, -5, -7, -3, -5, -7, 5, -2, -10, -1, -3, -2, -5, -1, -2, -1, -10, -16, 6, 1, -7, -6, -22, 0, -11, -10, 0, 1, -5, -2, -8, 9, 2, -3, 4, -1, 0, -19, 5, -12, -4, -3, 10, 11, -4, 5, 10, 3, -16, -5, -4, -1, 0, -5, -3, -5, -2, -9, 0, 6, -1, 0, -7, 9, -8, 8, 1, -3, -7, -10, -2, 1, 8, -6, -3, 15, -12, -8, -5, 9, -1, -6, -11, -11, -3, 2, -16, 5, -3, -1, -2, -8, 13, 9, -3, 23, -3, -8, -5, -9, -3, 2, -6, -1, 0, -3, -2, 0, -6, -8, -6, 17, -11, -12, -3, -12, -2, 6, -14, 6, -10, -9, 1, -5, 7, 3, -12, -2, -12, 5, -2, -14, 8, 0, 7, 1, -5, 1, 6, -5, -19, 0, -12, -2, -25, 4, -4, -7, 3, -5, -11, 0, -12, -8, 3, -2, 18, 4, -18, 2, -8, 2, 3, -25, 7, -13, -3, -7, -11, -12, 3, 14, 0, 12, -1, 6, -20, -9, -4, -6, 1, -5, -7, -6, -11, -20, 1, 4, 2, 2, -25, 14, -1, 9, -7, -16, 18, -10, 0, 1, 
  -15, -1, 6, -3, -24, -16, 1, 1, -35, 30, 6, -22, 5, 5, -19, -11, -25, -30, 2, -10, 4, 20, -29, 5, -38, -19, -7, -24, 5, -14, 5, 6, -1, -8, 14, 36, -12, -17, 8, 4, -31, 25, -8, 12, -7, 4, -23, -2, -38, -23, 2, -25, -2, -3, -18, 6, -26, -3, -8, -16, -7, 6, 3, -4, 18, 18, 10, -7, -16, 16, -3, -4, 3, -18, -8, 29, 6, 8, 2, 15, 6, 20, -4, 26, 8, -6, 10, -3, 8, 17, -1, 5, 15, -2, 7, -4, -9, 15, 14, 22, 8, 1, -4, 2, 3, 13, -4, -19, -3, -6, -2, 10, -8, 42, 3, -19, 24, 17, 24, 7, -14, -19, -18, -5, -12, 26, 2, 16, -24, -10, 13, 4, 17, -4, -10, -12, 30, 9, 4, -26, 7, 9, 2, 11, -8, -11, -1, 28, -16, -13, -12, 11, -17, -17, 2, -16, -11, 10, 4, 0, -23, 11, 16, 10, 0, -10, 3, -8, -8, 2, -7, -18, 4, 11, 17, -3, 3, -1, 4, -7, -3, -13, 18, 5, -9, 23, 9, -5, 13, 2, 16, -2, -8, -3, 24, 22, -19, -15, -1, 2, -7, 32, -1, 2, -1, 1, 12, -6, -22, 12, 5, 7, 4, 7, -22, 18, -13, -7, -9, -16, -17, -4, 10, 14, 16, -5, 4, 72, -2, -12, 1, -1, 5, 54, 3, 4, -3, -10, -13, -4, -8, -10, 1, -3, 24, -4, 19, 3, -7, 3, -11, -6, 15, 9, 10, -9, -1, -14, 10, 27, -9, 21, 7, -5, -27, 45, -5, 7, 6, 8, 22, -10, -29, -17, 7, 4, 39, -18, -44, 8, -23, -27, -13, -25, 1, -13, 20, -1, -2, 18, 21, 74, 14, 1, -7, 15, -27, 36, 0, 2, -2, 3, -3, 5, -34, -25, -3, 4, 35, -16, 10, 17, 0, 2, -18, -28, 9, 39, 7, -1, 24, 10, 2, 10, 10, 11, 14, 6, -33, 10, -14, -21, 1, -8, -8, 4, -25, -23, 5, 7, 12, -9, -42, 5, -18, -39, -22, -38, -11, -14, 8, 6, 19, 17, 20, -18, -2, 22, -8, -12, -19, 6, -2, -15, -1, 10, 5, -5, -44, -16, -2, 13, 10, -20, -36, -5, -7, 7, -14, -19, -2, 3, 1, 8, -8, 38, 2, 29, 10, 11, 1, 2, -26, 56, 1, -8, 1, -8, 5, -21, -29, -11, -2, 35, 14, -5, -32, 18, 4, 4, -19, 3, 19, -12, 3, -2, 
  -12, -14, -10, -10, -19, 1, 2, -5, -1, -18, -3, -1, -6, 6, -11, -2, 14, 3, -6, -12, -9, 11, 1, 5, 16, 1, -8, 21, 3, -27, -9, 5, 3, -10, -5, 7, -2, 8, 3, -1, 6, -26, 6, 4, -5, 9, -6, -15, -7, 6, 3, 2, 7, 7, 8, -8, -17, -20, -5, 10, 14, -4, -3, 4, -21, -9, 5, -13, 4, -5, 2, -4, -5, -3, -2, -16, 1, 10, -10, 1, -15, -5, 2, -17, -20, 11, -3, 11, -38, -15, -5, -10, -9, 10, -1, 7, -11, -19, 0, -21, 4, -3, 8, -10, 3, 6, 5, -12, 2, 8, 0, 6, -4, 5, 7, -18, -24, 15, -4, 14, -21, -13, -12, -12, -14, -7, -4, 5, -11, -31, -8, -29, 14, -7, 0, -4, 25, -9, -3, 10, 4, -2, 8, 0, -4, 13, 2, -11, -9, 2, -9, 2, -13, -11, -1, -12, -6, -9, 0, -6, -22, -27, -5, 3, 12, -2, -4, -12, 10, -13, -6, 2, 5, -8, -10, -7, 10, 16, 3, 16, -18, 13, 21, -4, -1, -40, -4, 24, -10, -5, -5, -2, 6, -15, 2, 1, -4, -2, 8, 0, 12, -5, 0, -5, 6, 0, -11, 5, 17, 6, 0, 0, -7, 13, 26, 3, 12, -22, -8, 11, -2, -5, 9, 2, 5, 2, -2, 1, -8, 4, 9, 3, 22, -15, -7, 2, -8, 9, -10, 1, 2, 17, 5, 10, -9, 9, 3, 8, 13, 2, -24, 4, 9, -13, 7, 7, -3, -7, 1, -4, -7, -7, -12, -2, 31, -9, -1, 14, 6, 0, 10, 7, 6, 36, 5, -8, 4, 3, 14, 6, 8, -9, 1, 9, -5, -11, 2, 9, -4, 5, 3, -5, -13, -1, -2, 5, 26, 10, 3, 25, -5, 0, -11, 6, 15, 18, -1, -17, -3, 9, 19, 9, 15, -3, -5, 7, -2, 3, 2, 3, -2, -2, -3, -12, -4, 7, 1, 4, 8, 5, -5, 9, -6, 6, -2, -1, 6, -6, -2, -19, 0, 4, 20, 7, 6, 12, -1, 1, 0, -19, -5, 9, -21, -6, 3, 11, 11, 7, -2, 5, -15, -3, -5, -10, 4, -3, -4, -11, -14, -5, -2, -24, -5, 24, 3, 5, -10, -6, -9, 3, -3, -14, -14, -4, -14, -8, 3, 7, 22, -13, -9, -12, 7, 29, 5, -18, 10, -9, 4, 2, -25, -1, -4, -22, 4, 13, -14, 17, -16, -24, -1, -18, 9, 25, -4, -18, 
  2, -6, 34, -6, -1, -3, 14, 9, -31, 1, 1, -26, 3, 2, 9, 1, -28, -19, -1, -28, 8, 36, -16, 6, -31, 10, -7, -18, -10, 9, 17, -5, -15, -6, 15, -6, 15, -2, 18, 0, -47, 13, -9, -30, 5, -1, 14, -9, -54, -29, -3, -7, -1, 6, -54, 0, -22, -5, -1, -34, -5, -7, -11, -11, -4, -9, 17, 27, -5, -2, 17, 0, -21, 6, -5, -6, -11, 6, 5, 6, -36, -13, 5, -19, -3, -3, -6, 8, -12, -2, 7, -19, -1, -6, 4, 0, -4, 13, 7, 20, 2, -10, -2, 4, -23, 15, 3, -13, -7, 0, 13, 28, -12, -25, -1, -15, 19, -2, -23, 3, -9, -10, -5, -12, 5, 4, -2, -1, 3, 10, 6, 47, 0, 0, 0, -5, -18, 18, 1, -11, -4, -15, 21, 9, -23, -21, -2, -5, 1, -7, -16, -9, -6, 17, -19, -39, -8, 4, 8, -10, 16, 10, -12, 8, 5, -6, 10, 0, 1, 16, -8, -16, -8, -17, 15, 21, -21, -9, -3, -27, 3, 36, -16, -1, -18, 12, 2, -17, 3, 0, 0, -3, -2, 0, 6, 9, -2, -9, 10, 6, -24, 23, 13, -5, -2, -6, 5, 18, -24, 16, -5, -20, 5, 4, -33, 4, -17, 1, 6, -25, -12, 5, 13, -5, 9, 9, 18, 7, 0, 2, 4, -3, -16, 8, 3, -16, 0, -3, -6, 4, -18, -9, -12, 7, 0, 0, -24, 12, -12, 2, 9, -12, -1, 12, 6, 4, 5, 7, 8, 24, -5, -6, 38, 1, -42, 1, -5, -16, 0, -3, 4, 7, -17, -11, 0, -6, -17, 50, -19, -17, -22, -20, -4, 3, -6, -4, -2, -2, 2, -3, 3, -4, 10, 2, -1, 5, -11, 3, -8, -15, -2, 2, 0, -2, -21, -12, -8, -30, 26, -6, -4, 9, -33, 4, -3, -21, -15, 5, 2, -2, 0, -1, -1, 15, 14, -3, 13, -5, -19, 16, 3, -18, 6, 2, 22, 6, -30, -29, -4, -20, 2, -14, -30, 4, -16, -20, -18, -32, 3, 12, 11, -8, -3, 24, 3, -2, 2, 9, 29, 2, -52, 2, -1, -22, 0, -9, 15, 14, -26, -33, -1, 7, 9, 0, -76, 15, -21, 3, -28, -42, -2, 12, 5, 4, -10, 53, 13, 27, 20, 12, 10, 1, -25, 6, -3, -30, 0, -7, 10, 14, -17, -30, 1, 6, 5, 18, -11, 14, -17, 17, -6, -34, 15, 20, 12, 8, 
  2, -6, -12, 2, -27, 2, 3, 5, 4, 9, 1, 1, -6, 4, -6, 3, -14, -6, -2, -14, -17, 7, 18, -6, 3, -9, -4, 12, 15, -16, 4, 3, 4, 7, 3, 28, -26, 9, -6, -4, 2, 12, 2, 8, 3, 2, 6, -3, 6, 3, -4, 17, 26, 8, 17, -5, -1, 1, -8, 13, -6, 11, 2, 8, 4, 4, 5, 27, -21, -11, 2, -7, 11, -1, 0, 0, 3, 0, 13, -2, 9, 14, 0, 8, -18, 1, 24, 4, 17, 8, -18, 11, -15, -9, 6, -4, -14, -5, 16, 8, -24, -6, 1, 4, -16, -17, 0, 2, -4, -7, 2, -9, -5, -6, 0, 4, -15, 7, 6, -4, 25, -14, -15, 14, 4, -13, -1, -5, 21, 25, 0, -23, -6, 0, 9, 7, -18, -14, 0, 8, -5, 0, 2, -13, 15, 5, -1, 16, -21, -1, 2, -12, 12, -4, -12, 9, 19, -9, -4, -4, -18, 5, 3, 2, -26, 9, 7, 2, -2, -6, -8, -5, -4, -4, 6, -11, -8, -17, -6, 2, 2, 4, -16, -9, -40, -23, -3, -14, 1, 11, -3, 1, -10, -6, 6, -4, -20, -7, 6, 2, -7, -12, -4, 4, 6, -3, -4, 5, -1, -28, -1, 15, -23, 2, -14, -14, 1, -31, -24, 14, -25, 14, -1, -2, -9, -20, -2, 33, -18, -22, -7, -4, -20, 5, -6, 5, 1, -4, -2, -14, -18, 0, -1, 28, -5, 8, -7, -9, -3, -28, -21, 5, -7, -8, -1, -9, 6, -8, -2, -1, -25, -12, -3, -2, 21, -26, -7, 3, 1, 1, 0, -8, 24, 11, -4, 17, -12, -4, 4, 5, 29, -6, -1, 26, -11, -10, -5, -5, 12, 5, -9, 0, -36, -3, 0, 2, 4, -12, 1, 23, 1, 6, -14, -12, 18, 16, -2, 5, -6, 8, 28, -14, 37, -5, 5, 7, -4, -24, 6, 2, 16, 14, -6, -11, -9, -2, 8, 14, 3, -22, -7, -3, -3, 11, -6, 0, 7, -4, -3, 2, 4, 10, 4, -16, -12, -7, -9, 7, -2, 3, -8, 1, -18, -5, 12, 2, -13, 0, -2, -11, -8, 19, -4, -17, 0, -1, 4, 7, 9, -13, -5, -3, 13, 0, -8, -12, -23, -27, -4, 10, 11, 5, -9, -7, -49, 8, -19, 10, -2, -14, -2, -4, -18, -7, -8, 2, 15, 1, 2, 6, 1, 2, 3, 16, 15, 3, -31, -1, -28, -66, -25, 1, -8, -6, 0, -7, 
  2, -16, 17, 14, 10, -6, -9, 14, -49, 25, 1, -17, 0, -2, 2, 5, -26, -37, 6, -27, 0, 3, -27, 6, -23, 6, -16, -7, 15, 6, 7, 5, 0, -7, 17, 16, 1, -1, -7, 7, 0, 19, 0, -13, 3, 3, -13, -2, -26, 2, 3, -11, 1, 1, -25, 8, 2, 39, -11, -17, 9, -2, 5, 2, 27, 27, 11, -2, 0, 3, -8, 1, 16, 16, -1, 7, -6, 5, -6, 32, -11, 3, -4, -18, 3, -1, 7, 8, 0, 10, 16, 16, 7, -5, 14, 0, -1, 3, 17, 20, 14, -8, -7, 3, 1, 12, -11, -13, -5, -2, 14, 19, -18, -13, -3, -21, 6, 4, -16, 9, -11, 14, 1, -6, -3, 11, 7, 6, -11, -11, 8, 34, 2, -3, -8, 0, -21, 19, -2, -12, -7, -10, 3, 17, -22, -3, -5, -20, -11, -8, -24, 1, -32, -11, 0, -33, -7, 0, 10, 0, 6, 5, 23, -2, 5, -4, -4, 8, -16, 15, 2, -18, -1, -6, 16, 4, -24, -21, -4, -20, 2, -8, -17, 3, -26, 27, -3, -10, -7, 18, 11, 2, 5, 3, 24, 21, 5, -7, 4, 22, -11, 36, 5, -15, -1, -3, 16, 15, -18, 2, 0, -31, 9, -1, -23, 8, -12, -18, -3, -23, 8, 32, 2, -8, 31, 14, 14, 5, 0, 5, -8, -2, -21, 10, 17, -18, -7, 6, 18, 2, -19, -14, 6, 2, 12, 11, -9, 0, -6, 24, -11, -16, 6, 12, 9, 1, 15, -5, 7, 23, 21, -9, 2, 2, -13, 36, 0, -6, -3, 4, 39, 7, -13, -10, 1, -2, 0, 1, -28, 12, -21, -7, -12, -8, -13, 8, 19, 0, 19, 0, -2, 11, 11, -3, -6, 3, 13, 26, -3, 3, 2, -3, 15, 6, 6, 7, -2, -4, 6, -12, 9, 12, 18, 26, -9, 4, -1, 12, 16, 2, 25, 4, 9, 19, 22, 7, 0, 10, -17, 20, 3, -15, 2, -7, -3, 0, -39, -23, 1, 5, 9, 2, -26, 2, -15, -3, -6, -24, 1, 15, 8, -3, 15, 27, 14, -3, 14, 10, -9, 1, -38, 26, 8, -17, 2, 4, 20, -3, -36, -31, 6, -15, 14, -10, -42, 13, -21, 19, -8, -32, 7, 0, 9, -8, -15, 19, 16, 7, 31, 5, -2, -1, -32, 17, -4, -30, 1, -6, 14, 14, -39, -34, -2, 23, 18, 3, -48, 10, -18, 0, 1, -30, 6, 1, 8, -5, 
  -31, -24, -7, 13, -10, -9, -7, -7, -3, -14, -6, 2, -5, -8, -5, 13, -12, -24, -6, -10, -52, 2, 12, -4, 2, -22, 4, 2, -32, -23, -6, 2, -1, -14, -7, -10, 1, 0, 5, -23, 2, -26, 2, -9, 2, -1, -1, 2, 4, 2, -11, -6, -8, -8, 11, 4, -25, -14, 7, -2, -4, -4, 5, 1, 14, -6, 4, 3, -25, 4, 10, 1, 4, 2, 1, 2, 4, -2, 2, 9, -18, 7, -10, -9, -5, 5, -4, 9, -4, -14, 3, -2, 3, 6, 0, -18, 7, 3, 0, 5, -17, 14, 3, 6, -8, -3, -5, 0, -2, -1, -8, 1, -12, -3, -4, 3, -3, 1, 7, 14, 2, -1, -11, -6, 7, 0, 14, -9, 13, -2, -3, 4, -20, 0, 1, -5, 2, 0, 1, 6, 0, 0, -6, -2, 13, 7, 1, 17, 3, -2, 16, -13, 4, -9, 1, 6, 4, 1, 4, -5, -6, -3, -5, 19, -7, 3, 12, -11, 16, 3, -6, -12, 3, -2, 8, 4, 0, 13, -1, 6, -2, 1, 27, -29, -6, -16, -21, -5, -9, -4, -10, 0, -8, -8, -10, 22, -3, -14, 9, -11, -23, -4, -2, -6, 9, 1, 2, 2, -16, -22, -13, -22, -22, -19, -7, -4, -21, -38, 5, -5, -13, -19, -2, -4, -5, -24, -7, 1, -1, 3, 9, 9, -8, 2, -3, -6, 5, 1, -4, 9, -10, -13, -7, 0, 6, 4, -5, 2, -23, -21, -1, -14, 5, 6, -14, -1, -3, -17, 11, 17, -1, 7, 12, 4, -17, -29, -4, -13, -1, -12, -8, 7, 0, -15, -9, 13, 2, 4, -24, -2, -28, -41, -6, 9, -7, -8, -6, -4, -7, -6, -4, 1, -23, -1, 1, -5, -13, -18, 11, 3, 1, -8, -7, 4, -2, 0, 4, 15, -14, 2, 5, -6, 7, 0, -8, -8, -16, -8, -8, 0, 11, -14, 1, -6, 5, 10, 18, -4, 25, -16, -2, 5, -1, 1, 2, -5, -7, 4, -12, 11, 8, -4, -7, 0, 8, 10, 5, -11, 4, -1, -7, -6, 5, -24, 5, 28, -13, 2, 24, 12, 15, -8, 0, 14, -5, 0, 0, 7, -2, 13, -9, 1, -25, -11, 17, 12, 29, 17, 4, -3, 15, -9, -3, 3, 11, -23, -1, -7, -12, -2, 15, 6, 14, -4, 2, 1, 0, 5, -6, -4, 5, 7, -11, -16, -7, -1, -7, 10, -3, 22, 4, -4, 5, -7, -7, -5, 
  -9, 11, 5, 7, 5, -4, -8, 9, -37, 16, 10, -30, 9, 0, 5, -11, -37, -35, -3, -8, -7, 25, -32, 10, -40, 4, 17, -22, 12, 11, -5, -7, -5, -12, 12, 8, 10, 7, -4, -1, -38, 18, 2, -11, 2, 9, 10, 7, -35, -17, -1, -22, -1, 10, -37, -1, -19, 0, 2, -38, -5, 2, -1, 0, 0, -1, 5, -5, 8, -6, 4, 10, -13, -6, 2, -9, -6, -1, 9, 14, -17, -10, 2, 5, -4, -7, -28, 9, -19, -2, 18, -11, -4, -5, 0, -2, -13, -13, 3, -3, 18, 1, -12, 7, -15, -2, 1, -8, -2, 6, 3, 23, -12, -20, 5, 6, 12, 7, -20, -11, -16, -4, 27, 0, 14, 11, -4, -4, -13, -23, 9, -4, 11, -8, -2, -1, -1, 1, -9, -12, -5, 1, -5, 2, -3, -33, -6, -5, -3, -1, -14, -6, -6, 1, 16, -22, -8, -7, 11, -4, -5, -7, -1, 5, 14, -1, -9, -5, -13, 4, 0, -13, 1, 3, -3, 10, -14, -24, 2, -6, -12, 3, -32, 9, -21, 9, 19, -19, 1, 13, -2, 2, 5, -11, 15, 4, 1, -24, -6, 6, -28, 16, 8, -11, 0, -2, 2, 7, -24, -6, 0, -14, -4, 13, -25, 1, -10, 4, 10, -30, -22, 20, 7, 2, -16, -10, 2, -14, 17, -3, -1, -6, -30, -9, 11, -29, 0, 4, 8, 10, -16, -20, -6, -9, -1, -3, -30, -9, -13, 0, 4, -24, 2, -14, 3, 2, 3, -5, 9, 8, 2, -4, 25, -7, -28, 4, 16, -16, -7, 5, -2, 16, -11, -13, 0, 12, -8, 10, -18, -1, -18, -9, 16, -20, -15, 5, -1, 5, 1, -12, -1, -2, 10, 3, 0, 6, -9, -3, 0, -15, 9, 1, -7, 11, -8, -16, -5, -11, 15, -5, 1, 14, -25, -7, -2, -5, 1, 6, 0, -5, -3, -1, 5, -4, 8, 1, 12, 7, -20, 20, 16, -10, -1, -3, 4, -7, -24, -16, 4, -8, 22, 9, -16, -5, -17, 1, 14, -15, -5, 4, 13, -4, -4, -5, 2, 0, 4, -1, 4, -9, -35, 14, 2, -24, 4, 1, 9, 22, -28, -37, 1, 2, 9, -8, -40, 7, -30, 5, 3, -14, 0, 1, -7, 1, -18, 1, -2, 29, 2, -4, -2, 6, -38, 5, 4, -8, 3, 4, 10, -1, -25, -27, -5, 10, 17, 12, -23, 21, -2, -5, 12, -10, 1, 1, 11, -3, 
  12, -4, 1, -8, -46, -5, -3, 1, 13, -15, 0, 4, -4, -2, -17, 20, -2, 23, -8, 6, -39, 0, 7, -3, 31, 18, 3, 15, -12, -15, 13, 6, -30, -8, -5, -21, -26, 8, 1, 5, 16, -30, -4, 9, -4, 3, -8, 5, -4, 0, -4, -19, 0, -5, 17, 2, 4, -6, -2, 7, 31, -10, 0, 6, -1, -1, 3, 12, 1, -1, 4, 2, 7, 5, -2, -10, 7, -1, -2, 12, 16, 8, -7, 18, -12, -1, 12, 2, -3, -6, -15, 9, 0, 8, 3, -6, -9, -20, 4, 14, 0, -8, -1, -3, 2, -6, -2, -1, 5, 3, -8, 16, 0, 13, -4, 13, -12, 8, 17, -4, 3, 4, -11, 18, -11, -11, 2, -8, -30, -35, -8, -27, 5, -11, -1, -8, 8, -40, 5, -3, 1, 2, -12, 22, 22, 28, 1, 0, -6, 7, -9, -8, -36, -7, 6, 6, -6, -5, 1, -3, -4, -8, -7, 13, -17, -2, 10, 0, 22, -6, -4, -4, 3, 4, -11, 13, 25, 19, 2, 3, 9, 13, 20, -4, -27, -3, -8, 14, -12, -2, -2, -2, -31, -17, -9, 21, -19, -3, 15, -5, 13, -3, 0, -11, 0, 2, -5, 17, 7, 4, -8, -6, -15, 12, -8, 1, -50, -29, -1, 25, 2, 5, 5, -7, -22, -16, -1, -10, 3, -4, 14, -2, 2, 3, 4, -3, 3, 5, 0, 10, 9, 6, 0, 25, 14, 6, -15, -2, -51, -25, -1, 5, 7, -2, 7, -6, 0, 4, 8, 6, -8, -2, 17, 3, 21, -11, 3, -2, 2, -2, 5, 15, -9, 30, 0, 1, -2, -6, 12, 11, -34, 7, 11, 24, -10, 15, 0, -7, -35, -6, 1, -17, 2, -5, 4, 5, -7, -5, -7, -5, 1, -3, -3, 20, 8, -7, -8, 6, -18, 12, -7, -5, -33, 6, 3, -4, 3, -4, 0, -5, -14, 0, -11, -9, 4, 0, 6, 12, -3, -14, 0, -8, 1, -7, -12, 9, 0, 6, -1, -2, -2, 1, -2, 1, -13, 19, 2, -5, -18, -8, -1, 5, -23, -12, 2, -28, -4, -12, 7, -10, 20, -18, 5, -4, 1, -1, -13, 15, -3, 13, 2, 2, 1, 9, 18, 3, -19, -21, -4, 8, -4, -7, 3, -9, -22, -17, -2, 15, -4, -8, 18, 3, -12, 4, 3, -9, 2, 1, -10, 17, 24, -3, -5, -8, -11, 9, 3, 0, -14, -44, 7, -3, 1, -7, -2, -8, 
  2, 2, -1, -2, -16, -8, -12, -6, 9, -23, 2, 17, -11, 7, -14, -5, 22, 21, 6, 10, -29, -16, 15, -1, 19, 18, -8, 17, 8, -14, 8, 6, 2, 22, 12, -19, -24, 2, -4, -1, 32, -9, 6, 2, -6, 10, -19, -2, 2, 3, -2, 7, 3, 11, 26, 8, 7, 5, -12, 6, 18, 2, 8, 6, 0, 16, -5, -10, -29, 3, -6, 5, 16, 9, -4, -2, 8, 1, -2, 8, 7, 3, 3, -8, -4, -7, 13, 8, 4, 0, -1, 4, 10, 9, -3, -5, -18, -10, -7, 19, -15, -8, 2, -8, -5, 3, -5, -11, 4, -7, -7, -2, -6, 5, -5, -21, -6, -6, 1, 3, -14, -7, -20, -5, -2, 5, 7, -7, -27, -7, -3, -42, -4, -4, -10, -4, -7, 6, -3, -9, 5, 2, -12, -2, -1, -7, -3, -25, -8, -9, -8, 2, -10, -31, 4, -16, 3, -16, 0, 2, -34, 4, -3, 18, -20, -6, -2, -1, -20, 1, 0, -12, -9, -5, -8, 8, -9, -14, -1, -15, -18, -13, -20, 3, -14, -36, -24, -5, -8, 9, -6, 7, -17, -24, -11, 14, -21, -7, 9, -2, -16, -7, 1, -15, 1, -3, 1, -2, -4, -9, -3, -26, -23, 7, -5, 0, -10, -9, -24, -15, -3, 15, -6, 7, -29, -4, -11, -4, -16, -6, -3, -7, -15, 9, 0, -14, -2, 0, -7, 4, -36, -14, -5, -30, -13, 18, -33, 0, -24, -23, -5, -9, 6, 17, -9, 5, -22, -7, 3, 27, -11, 1, -13, -3, -9, -23, -1, -11, 1, 2, 8, -2, -6, -4, -3, 15, 2, -11, -9, -14, -11, -30, 2, -5, 0, -14, -3, -4, -22, -18, -3, -6, -27, -7, 3, 3, -8, -38, 2, 1, 0, -14, -13, -1, -11, -1, -2, -18, -20, 4, -16, -2, -4, -42, -21, -21, -7, -14, -8, 0, -35, 1, -19, -31, -21, -5, 4, -6, -8, -21, -1, -9, -3, -7, -3, 3, 2, -12, -2, 6, -22, -5, -8, -1, 1, 0, -19, -15, -1, 0, -12, 3, -3, -3, -5, 7, -17, -11, -2, -11, -17, -8, -4, -6, 5, -2, -9, -7, 7, 9, -7, -11, -16, -3, 12, -6, 5, -3, -39, -5, 5, 15, 0, -1, -8, -13, -4, 15, -8, -12, -9, 1, -4, -13, 2, -10, 8, 3, -4, -13, -8, -3, 0, -32, -5, -8, -22, -2, -10, -44, -12, -13, -4, 5, -6, -6, 
  -17, -2, 6, 0, -3, -2, -2, 1, 22, -7, 0, 3, 1, 14, -1, -8, 3, -1, -4, -28, -1, -1, -21, 1, -1, -34, 0, -21, -16, -41, -5, 5, -19, 9, -8, 21, -23, -9, -1, -2, 4, -19, 0, -12, -6, -6, 7, 11, -4, -20, -2, -11, -13, 1, 8, -6, -21, -44, 8, -38, -13, -33, 3, -30, -14, -5, -2, 9, -16, -2, -6, -2, -10, -11, -3, 12, 1, -3, -12, -3, -3, -14, -5, 17, 6, -3, 2, -9, -10, -12, 16, -14, 1, -14, 6, -31, -14, 2, -5, 7, -23, 9, -6, -2, -13, -15, 0, 11, 4, 3, -3, 5, -1, -18, 0, 3, 5, 2, 2, -2, 21, -12, 21, -2, -6, 0, 0, -26, -8, 7, 6, -15, -8, 8, -10, -1, 9, -5, -2, -18, -1, -3, 10, 4, -10, -15, -3, -17, -22, -16, 11, 11, -11, -15, 4, -1, -2, -33, 4, -1, -23, 9, 2, -20, -11, 8, 10, 8, -7, -23, -3, -3, 2, -4, 4, 7, -15, -17, 2, -22, 3, 10, -27, -1, -8, -31, -1, -3, 2, -12, 5, -53, -3, 6, -4, -20, -22, -6, 0, 1, -23, 8, -4, -13, 5, -12, -26, 10, -2, -6, -2, -33, -3, -4, 0, -4, -4, -28, 9, -21, 2, 1, -2, -60, -26, 8, -3, -12, -6, -7, -4, -7, -4, 4, -3, -6, 1, -11, 4, 19, 0, -5, -2, 5, -24, 11, -30, 8, 9, -21, 0, -20, -23, -46, -5, 4, -31, 9, 4, -14, -23, 5, -4, 2, 4, -24, 1, 2, 4, -11, -9, 3, 16, 1, 0, -11, -34, -3, -1, -5, 6, -26, 5, -7, -2, -17, 8, -31, -3, -15, -6, 3, -16, 5, -3, -3, -14, -5, -5, -13, -3, -15, 5, 9, -8, -10, -1, -3, -23, 7, -7, -8, -22, -42, -3, -6, -10, -24, 4, -17, -9, 4, -3, -15, -3, -5, 0, -13, -3, -30, -6, -19, -6, -9, 9, 6, 3, 8, -7, 10, -3, 9, -17, 3, -1, -11, 0, 12, -14, -18, -4, -21, 1, -21, 1, -9, 1, -14, -3, 2, -1, -6, 3, 19, -5, -6, -10, 5, 0, -7, -2, 12, -7, -6, -12, 1, 0, 0, 1, 7, -9, -12, -7, -31, -38, -31, -9, -16, -15, -6, 4, 5, -18, -9, -1, -1, 0, 16, 4, -15, -28, -25, -5, -2, -4, 14, -15, -12, -1, -17, 22, -1, -4, 17, 2, -74, 
  -16, -19, -10, 3, -23, 3, 7, -1, 14, -17, 0, -2, -8, 5, 5, 20, -2, 24, -6, 15, -17, -12, 23, 4, 6, -3, 10, 30, -18, -44, 2, 9, -3, -10, 5, -23, -30, 8, 10, 4, 26, -20, 3, 13, -7, 1, -13, 18, 22, 33, 0, 10, -3, 0, 26, -1, 7, 9, 7, 11, -2, -25, 2, 2, -5, 5, -7, 7, -9, -2, 3, 2, -1, 13, 2, 5, 2, -1, -5, 16, -2, 20, 4, -7, -2, -2, 28, 1, -14, 14, -8, 16, 3, 3, 3, -7, -11, -18, 7, -2, -4, -4, 3, 6, -5, -5, 3, -1, -1, 0, 11, 8, 3, 5, 0, 17, -7, -10, -12, -4, -6, 10, -5, 11, -7, -9, 7, 3, -9, -6, -6, -17, -19, -9, 3, 9, 2, -16, 2, 2, -3, 7, -6, 15, 16, 25, -4, -2, -18, 11, -20, 2, 3, 4, 11, 20, 5, -16, 3, 8, -8, 4, 6, 25, -10, -2, 11, 0, 34, -12, 1, -8, -5, 7, -5, 12, -1, 6, 7, 10, -6, -18, 23, 0, -6, -6, 14, 6, -12, -11, -5, -2, -17, -2, 9, -2, -13, 4, 20, -1, -7, -6, -2, -2, -4, 7, -21, 18, 14, 6, 4, 8, -16, -9, 8, -5, 3, 15, 6, 8, 5, -20, -14, 12, -13, 5, -11, 1, -12, -1, -2, 6, 10, -4, -2, -10, 0, -2, -12, 14, 24, 23, 4, 9, 2, -14, -1, -1, -15, 11, -1, 17, 11, -16, -9, 0, 4, -13, 10, -6, -17, 2, 6, 5, -1, -18, 3, -12, 5, -2, -5, 20, 14, 22, -4, 45, -3, -5, 12, 2, -20, 10, 15, 3, -16, -17, 3, -8, -18, -9, -12, -4, -10, 3, 14, 0, -11, -21, 7, -4, 4, 4, -20, 5, 1, 9, 12, 14, -18, -16, 9, 5, -11, 1, -4, -6, -4, -20, -16, 4, -23, -8, 2, 0, 5, -5, 1, 2, -5, -46, 9, -12, -7, 11, -5, 17, 2, -4, -3, 0, 8, -25, 4, 2, -8, 18, 6, 14, -2, -12, 4, -2, -2, -10, -1, -11, -8, 2, 7, -3, -11, -17, 2, -11, 4, -1, -15, 18, 20, 9, -2, 11, 9, -10, 11, 12, 16, 20, 7, 15, 4, -8, -11, 3, 12, -3, 0, -5, -13, -6, 17, -4, 18, -33, 3, -12, 6, 3, -15, 10, 1, -3, -6, -17, 1, -13, 12, 2, 1, 26, 4, 4, -3, -3, -4, -1, 
  1, -6, -1, -11, -15, -3, -6, -1, 2, -2, -6, 0, 1, 5, -8, -6, -21, -7, -3, -19, -4, -4, -9, -1, 14, 7, 2, 5, -8, 4, -9, -4, -22, -7, 2, 11, -15, 3, -2, 2, 6, -12, -4, -4, -5, 0, -10, 5, 2, -1, 1, -9, -7, 5, 4, 3, -6, -32, 0, 2, -1, -3, -1, -6, -21, 1, -4, -3, -17, -5, -8, 0, 4, 8, -6, 10, -5, -9, -7, 5, 7, 29, -1, -24, 3, -6, 10, 1, 12, -10, 1, 14, -8, -26, -7, -1, -13, -4, -6, -12, -15, -1, 2, -2, 14, -25, -7, -9, -4, -14, 1, 1, -5, 8, 3, -16, -24, -3, -9, 3, 23, -21, -3, -6, -4, -31, -14, -8, -23, -13, -7, -16, -9, 0, -5, -10, 3, -16, -5, 0, 1, -7, -8, -3, -3, 5, 1, -18, -22, -8, 2, 2, -10, -9, 4, 1, -4, -28, -11, -7, -25, -10, 3, 3, -9, 0, 2, -3, -11, -10, -6, -10, -3, -9, -14, 4, -6, 4, 0, -45, -18, -4, -18, -5, -6, -22, -5, -14, -6, -20, -8, 2, -22, -1, 3, 4, -5, -3, 4, -7, 5, -16, 0, -6, 2, -9, -2, -3, 3, 1, 5, -17, -26, -3, -13, 4, -14, -16, 1, -2, -5, -14, -1, 1, -29, 3, -5, -17, -13, 1, 4, -3, 11, -22, 4, 3, 4, 4, -11, -5, -10, 8, -5, -26, -21, -2, -13, -1, 7, -12, -6, -15, -6, -22, 5, -4, -14, 9, -5, -7, -4, -3, 2, -3, -2, -17, 0, -3, 2, -8, 5, -5, -10, 1, 4, -25, 0, -3, -13, 5, -8, -17, 3, -5, -4, 8, 1, -8, -22, 7, -5, -1, -2, 0, -4, -5, 20, -12, 3, 24, -2, -5, 6, 6, -2, 27, 3, -50, -5, -4, -7, -1, 35, -22, 2, -7, 2, -7, -3, -5, -24, 2, -6, 3, -5, 4, 9, -3, 15, -6, -5, 8, -7, -6, -3, -3, -1, 8, 1, -47, 10, 4, 19, -6, -12, -15, -4, -1, -3, -6, -4, -3, -17, -13, -1, 6, -9, -6, -3, -2, -20, 3, 3, -18, 0, -6, -12, -18, -27, -2, 5, -16, -3, -2, -13, 4, -15, -17, -1, -23, -3, 5, -9, -3, -39, 0, -3, 20, 11, 5, 4, -5, -5, 10, -3, -6, -1, 0, 3, -3, -19, -7, 1, -5, 7, 6, -23, -7, -6, -32, -4, -8, 2, 22, -5, -7, 
  6, -2, -9, 3, -15, 1, 4, 7, -4, 18, 3, -3, -4, -7, -6, 5, -5, -8, 0, -8, -4, -6, -24, 8, 6, 7, -11, -12, 0, -19, 17, 13, -11, -9, 9, 8, -6, 6, 4, -8, 12, -4, 0, 9, -5, -9, -10, -11, 0, 20, -6, -7, 12, -3, 15, 17, 2, 2, -3, -4, 11, -17, 1, -2, -16, -1, 3, 4, -29, -7, -1, 4, 7, -11, -1, 11, 5, -14, -22, -6, 0, 13, -3, 12, -25, -2, 17, 0, -4, -13, -8, -1, 11, -27, -1, -15, -12, -26, 8, -8, -14, -9, -12, -3, 5, -7, -4, 11, -2, -1, 1, -17, -12, 19, 0, -4, -26, -2, -4, 8, 3, 2, -1, 1, -13, -31, 5, 7, -19, -4, 5, -11, -11, -3, 3, -13, 4, -9, -2, 5, 4, 1, -1, -5, -15, 9, -8, -13, -25, -7, 2, 7, -10, 1, -2, -2, -9, -6, 5, -3, -20, -4, -3, -3, -6, -4, 13, 9, 5, -5, -4, -10, 6, -8, -6, -9, -22, -6, -10, -5, 1, -6, 6, -1, -4, 1, 3, 5, -5, -1, 8, 3, -5, -20, 1, 9, -21, -16, 12, -8, -9, -14, -4, -4, 4, -4, -11, -13, -10, -3, -4, -15, 1, -10, -8, -8, -6, -18, -6, -7, -14, -8, -1, 9, -15, -9, -1, -7, -9, 11, -1, -7, 6, -11, -2, 6, 1, -5, -2, -3, -4, 0, -4, 9, 5, -9, -9, -5, 6, -19, -16, -9, 6, -13, -7, 1, -20, -18, -3, 7, -17, -7, -12, 0, 7, -13, 9, 4, 5, 1, -12, -7, -1, 15, -4, 4, -27, -4, 8, -1, 2, -7, 2, 4, -1, -14, -4, -7, -27, 7, 2, -9, -21, 8, 0, -3, 10, -7, 4, 3, -6, -5, -10, 4, -3, 17, 8, -9, -12, -8, 5, 3, -6, 6, 0, 1, 0, -15, 6, -6, -23, -9, -1, -2, -10, -1, -4, 7, -12, -17, 3, -8, 4, -5, -11, 1, -4, 3, -6, -12, -21, -7, -6, 7, -5, -9, 0, 2, -7, -27, -1, 13, -15, -30, 4, -10, -15, -11, 7, 6, 6, -11, 7, -8, 4, -4, -3, -2, -8, 11, -11, -9, -5, -6, -6, 3, 4, -10, 0, -8, -3, -12, -6, 6, -7, -8, -8, 12, 12, -18, 2, 0, -12, 0, -9, -11, -2, 0, 2, -13, -18, -14, -2, -2, -9, 0, -8, 0, -19, -15, -4, -5, 7, 12, -6, 4, 
  -9, 18, 36, 11, -12, -2, -6, -13, -35, 46, -5, -13, -3, 1, -8, -2, -20, -29, -4, -6, 36, 10, 7, 1, -7, 47, 18, -32, 15, 38, -26, 0, -10, 31, 31, 16, -47, -6, -5, 1, -30, 13, 0, -12, 4, -6, 15, 11, -48, -35, -5, 7, 4, 11, -19, 8, -29, 12, -6, -32, 3, -26, 2, 2, 7, -3, 34, 13, -46, 1, 1, 2, -14, 12, -5, -4, 5, -7, 5, 17, -6, -7, -3, 1, 17, -4, 26, -11, 2, -5, 23, -15, -4, -13, -1, -2, -23, 24, 5, 31, 29, -4, 4, -3, -10, 35, 2, -5, 4, 0, -18, 9, -18, -9, 3, -7, 25, 5, 5, 4, -11, 1, 17, -13, -1, -30, -15, 2, -40, 7, 4, 20, -68, -3, -6, 0, -6, 5, -3, -1, -2, 2, -23, 7, 13, -33, 2, -1, 57, 0, 0, -5, -3, -6, -4, -30, -2, 21, -17, 4, -14, 20, 4, 27, -47, -2, 1, 1, -27, -2, 2, -1, 0, 3, -5, 15, -17, -13, 0, 16, 28, 9, -26, -2, 3, 4, -8, -10, 4, 10, -16, 2, -1, 22, -11, 1, -18, 3, -2, -4, -17, -6, -2, -1, 5, 3, -13, 4, 0, -6, 0, 15, 38, -1, -29, 16, -21, 25, -4, 7, -9, -3, -17, -8, -10, -2, 0, -15, -69, -1, -3, 0, -10, 14, -2, -3, -4, -6, 10, 11, 5, -3, -1, -27, -7, -6, 5, 3, -19, -2, 30, -10, 2, 7, -6, -5, -13, 49, 15, 47, -93, -1, 2, 3, -22, 20, -4, -3, -3, 0, -11, 6, -26, -24, 2, -26, 34, -4, -22, -6, -21, 26, 43, -26, 27, -27, -9, -1, -31, 5, 13, 23, -3, -4, -6, -4, -31, 17, -1, 3, -2, -3, 7, -4, -32, -29, 3, -5, 14, -9, -33, 10, -20, 10, 4, -28, -12, 13, 17, -4, 8, 25, 2, 19, -21, 0, -4, -5, -25, 59, 1, -13, 4, 3, -6, 0, -42, -32, 3, -18, 12, -3, -28, -3, -18, 27, -14, -43, -2, 40, -27, -3, -16, 25, 0, 45, -108, -1, 1, -4, -21, 57, -1, 3, -6, -3, -6, 18, -31, -13, 0, 43, 31, -10, -33, 8, -21, 14, -14, -37, -16, 15, -6, -5, -19, 44, 41, 32, 2, 0, 3, -6, -4, 41, -5, 5, 0, -6, 15, -21, -2, -8, 0, 40, 3, 9, -8, 13, -17, 8, -18, -5, 18, -12, 0, 4, 
  -16, -22, -22, 34, -14, -5, 23, -10, -11, -16, 5, -24, -4, 0, -3, 0, -3, 3, 4, -11, 4, 3, 5, 1, -30, 21, -5, -6, 16, -15, -11, -3, -12, 12, -17, -15, -11, -4, 10, -10, -4, 1, -7, -19, -2, -1, -8, -18, -22, -21, -4, -13, -6, 0, -26, -2, -13, 31, -10, -16, 4, 0, 2, -4, -15, 4, -2, -8, 7, 2, 15, 12, -29, -14, -4, -25, -4, 3, -9, -5, -16, -12, -1, -25, -5, -9, -19, -14, -22, 34, -4, -20, 21, -6, -2, -2, -2, 4, -11, 7, -4, -1, 13, 6, -28, -26, 5, -9, 3, -3, -2, -1, -21, -24, 0, -16, 16, -6, -42, -7, -20, 36, -1, -37, 20, 4, 6, -6, 6, 1, -10, 8, -3, 2, 11, 11, -9, -9, 2, -23, 2, -5, -3, -11, -28, -35, -5, -21, -21, -7, -17, -6, -20, 36, 4, -38, 22, 14, -6, -3, -2, 1, -18, 4, -8, -14, 15, -4, -17, -8, 2, -26, -7, -9, 3, -18, -6, 11, -3, -15, 5, -4, 1, 1, 2, 36, -2, -25, 46, -11, 2, 1, -11, -16, -5, 10, -18, 2, 16, -10, 21, 3, 1, -6, -2, -4, -15, -11, -11, 23, -2, -17, 1, -7, -5, -7, -22, 21, 1, 9, -1, -23, -4, -1, 2, -5, -11, 5, -9, -21, 25, 6, -6, 23, -1, 2, -4, -2, -20, -19, -14, 2, -4, -9, -17, -1, -15, 5, -17, 50, -10, -13, -2, -13, -12, -2, 9, -12, -13, -2, -9, -1, 22, 18, -5, 17, 2, -11, -9, 2, -11, -22, 10, 0, -3, 16, -4, -12, -9, -5, 4, 33, 5, -1, 14, -9, -3, 0, -14, 0, -6, 24, -10, 2, 21, -2, -21, -21, -2, -13, -3, 5, -5, -13, -15, -7, 1, -8, 0, -9, -15, -14, -7, 26, -1, -26, 7, 3, 5, 3, -2, 9, 0, 15, -1, -13, 33, 9, 1, 10, -2, -22, -5, -1, 4, 0, -24, -39, 1, -22, -5, 5, -26, -3, -15, 50, -6, -29, 39, -10, -2, -6, -19, -15, -5, 24, 6, 6, 26, 5, -13, -3, 3, -10, 4, -16, -10, -15, 9, 0, -5, -39, 12, 16, -10, -11, -24, 42, 0, -11, 5, -18, 3, 3, -31, -13, 11, 13, 19, -5, 21, 5, -17, 10, -1, 0, 7, 2, -9, -9, 2, -17, 2, -29, 26, -8, 11, -5, -1, 20, 5, -7, -3, -9, 3, 0, 
  2, -6, 2, -3, 1, -2, -3, 5, -8, 3, 3, -1, 5, -3, 1, -6, -5, -16, -3, 7, -4, 1, -13, 1, -8, 2, -2, -6, 2, 1, -5, -3, -2, 4, -3, 5, -1, -4, -2, -1, -3, -1, -4, -4, -4, -3, -1, -7, -4, 7, 3, -4, -1, -2, 0, -5, -1, 1, -3, -2, -7, -5, -1, 2, -4, 6, -1, -1, 3, -3, -1, -2, 0, -6, -6, -5, -3, 1, -3, 0, 0, -1, -4, 2, -6, -1, -6, -5, -1, -2, -2, -3, 1, -4, 3, 1, -7, -9, 1, -3, -6, 2, 0, -6, -8, -7, -3, 1, 4, -2, -6, 1, -1, -6, -2, -4, -12, 2, -1, -2, -3, -7, -6, -4, -4, -7, 4, -3, 6, -2, 4, 4, -3, -11, 4, -2, -2, -5, -7, -3, 4, -4, -4, -4, -12, -16, -1, -8, 1, -6, -10, 3, -4, 2, -7, 0, -4, -7, 0, 1, -3, -10, -5, 1, -4, -1, 3, -1, -4, -3, 1, -5, 3, 4, -3, 3, -1, -1, -2, -12, -4, -3, -3, -7, -3, 3, -4, -5, 5, -13, -3, 3, 6, -3, -3, -5, 0, -3, 2, 0, 4, 4, -2, 2, 2, -6, -2, 4, -1, -5, -2, -5, -7, 3, 2, 0, 0, 2, -4, 1, -1, -8, -3, 0, 2, -4, 3, -4, 2, -6, -2, -7, -2, -5, -6, -4, 0, -5, -2, 2, -3, 1, 3, -1, -4, 0, -6, -7, -3, 3, -1, -6, 1, -8, -2, -2, -5, 0, -2, 6, -2, 0, -6, 1, 2, -3, 2, -1, 4, -2, 1, -2, 0, 2, 2, 2, -11, -3, -4, 2, -4, -5, -4, -7, -6, -9, -2, 3, -8, 0, -2, 0, -1, -5, -3, -4, -5, -5, -2, -8, -5, -1, 0, 4, 3, -7, -4, -5, -7, 2, -1, -4, -2, -1, -1, -5, 1, -1, -2, 6, -1, -7, 0, 0, -6, 1, -4, 1, -4, -4, 3, -4, 2, -5, -3, 2, -12, -10, 2, 1, 0, 0, 2, -3, -5, -5, -5, -9, 3, 0, 3, 1, -2, 5, 3, -4, -2, 3, -6, 0, -5, -5, -5, 3, 6, -1, -5, -3, 0, -6, -4, -7, 4, 0, -3, -7, -7, 2, -3, -2, 4, -13, -5, -1, -5, -5, -4, 0, -1, -1, 4, -3, -3, -3, -7, -3, -1, -2, 2, -6, -2, -8, -3, 2, -4, -3, 1, -5, -6, 1, -7, -2, 2, -3, -5, -3, 
  -8, 2, 3, -4, -6, -1, 2, -2, -1, -1, 2, 8, -1, -5, 0, 4, -2, 5, -6, -8, -13, 3, -1, 2, -8, 2, 3, 5, -4, -6, 1, -7, 0, -8, -6, -3, 0, -1, -2, -4, -5, -10, -1, -5, -6, -5, -7, -6, 2, 2, 4, 4, -19, -4, -3, 3, 0, -2, 3, -4, -1, -9, 0, 1, -3, 5, -1, 4, -5, -2, -4, 1, -3, -4, -5, 3, -5, -5, 2, 5, -3, 3, 0, 0, -14, -5, -6, -5, -7, -2, 0, 0, -8, -9, -6, 0, 0, -3, -2, -1, -2, -5, 3, -1, 4, -4, -8, -3, 4, -7, -10, 4, 2, 0, 0, -3, -10, -5, -1, 0, -4, 2, -5, -2, 0, -3, 0, 1, -1, -7, 2, -2, 2, 0, -5, 0, 0, -5, -5, -1, -2, -3, 2, -2, -4, -3, 5, -3, -3, -5, -2, -4, -5, 0, 0, 2, -3, -3, -6, -5, -1, -3, -5, 2, 1, -5, -6, 3, -2, -2, -6, 0, 3, -3, 0, -4, -4, -4, 0, -3, -4, -5, -2, -5, -8, 2, -3, -2, -8, -9, 1, -7, -8, -4, -2, -5, -5, -8, -6, -6, -3, -7, -5, -2, 6, -2, 1, 3, -1, -2, 1, -1, -2, -5, 0, 3, -8, -3, -6, -2, -7, -3, -2, 0, 1, -6, 0, -3, -10, -4, -6, -1, -8, 2, 3, 5, 1, -4, 1, -3, -2, 5, -2, 0, 4, 3, -3, 1, -3, 4, 2, -4, -1, -11, -2, -7, -5, 6, -3, 0, -2, 0, 7, -4, -7, 2, -2, 1, -4, 0, -6, -1, -2, -5, 0, -4, -1, 2, -7, 3, -5, 2, -3, -3, 2, -8, -3, -7, -1, 0, 2, -1, -5, -1, -1, 3, -3, -4, -4, -9, -12, -3, -2, 1, -1, -2, -2, 0, -8, -1, 4, 1, -4, 2, -6, -1, -1, -11, 1, -2, -6, -1, -4, 0, -1, 1, 6, -2, 0, -3, 3, -3, -2, -1, -4, -4, 3, -3, -5, -1, -16, 3, -6, -9, 0, -1, -1, 2, -6, -2, 0, -3, -5, -8, -6, -1, -7, -7, -4, -6, -7, -6, 1, -1, -2, -5, 3, -1, -9, -5, -2, -2, -14, 0, -5, -8, -2, -2, 3, -2, 1, 0, -3, 1, -7, 3, -4, -7, -3, -4, -2, -3, -10, -1, 2, -3, 5, 2, -6, 2, -3, -5, -6, -8, -7, 3, -4, -1, -2, 1, -6, -9, -1, -4, 1, -1, 
  -2, -4, -15, 9, -8, -7, -1, 1, 15, 7, 1, 10, -9, 4, 3, 13, 5, 17, -3, 24, 3, 0, 6, -3, 22, -10, -13, 23, 0, -20, -10, 0, -17, -3, -6, 11, -12, -10, 7, -2, 11, 0, 12, 21, -2, 2, 8, -6, 10, 10, 0, 10, 18, 4, 24, -3, 17, 1, 0, 8, 3, -12, -3, 16, -12, 11, 6, 20, -19, -1, 5, -1, -8, 4, -1, -12, 0, 9, 9, 18, -2, 6, 2, -4, -2, 7, 26, -1, -9, 2, -12, 7, -7, 23, -4, -9, -3, -11, 4, -10, -7, -7, 8, 1, 6, -6, -2, 7, 6, 6, 1, 8, 14, 26, 7, 19, 16, -3, 24, -4, 31, 4, -16, 29, -14, 8, -4, 4, -7, -9, 11, -24, 8, -8, 8, -5, -4, -2, 0, 6, -5, -2, 7, 8, 6, 2, -5, -9, 2, -10, -5, 3, 7, -16, -2, 1, 5, -13, -3, 6, -11, -15, 11, 25, -9, -9, 17, -1, 21, -17, -2, 12, 3, -2, -2, -2, 9, 18, 1, 20, 1, -7, 11, 2, 21, -22, -17, 36, -16, -15, -2, 3, -15, -30, 10, 9, -9, -9, 19, -5, 11, -9, -3, -1, 1, 2, -13, -4, 4, 4, 2, 5, -16, -3, 34, 7, 14, -1, -9, 17, -29, -12, 3, -6, -13, -10, -1, -11, -14, -1, 17, 9, 16, -8, 1, 13, -4, 2, -2, 9, 12, 27, 3, 4, -14, 7, 4, -1, 10, -4, 2, 18, 6, 2, -5, 13, -10, -17, 12, -3, -2, -8, -3, 1, 20, 14, 8, 8, -3, 0, -10, 7, 18, 13, -1, 12, 3, -2, -2, 10, 6, 10, -3, 18, -3, -3, 0, 4, -11, -17, -1, 9, 6, -4, 10, 3, 5, -12, 8, 3, 4, 4, 1, 7, 0, 5, -6, 18, 5, 5, -7, 8, -2, 7, -7, -11, 16, 10, 6, -6, -2, -1, 3, 4, 3, -2, 16, 9, -13, -24, 9, -14, -2, -2, -2, -12, -19, 0, -2, 1, 20, -1, -16, 15, -10, 19, 9, 1, -6, 13, 10, 5, -2, -20, 4, -7, 0, 5, 11, 0, -2, 14, 4, -1, -5, -5, -15, 0, 3, -1, -5, -10, 1, 2, 15, 4, 9, 30, -7, 22, 7, -14, -11, -7, 1, -28, -2, -13, -18, -9, 1, 2, -7, -5, 2, -7, 5, 2, -8, -2, 1, -17, 0, -26, 23, -17, -4, -3, 2, 11, 6, 1, 7, 20, -1, -2, 
  -10, -2, -4, -10, 6, 0, -3, -3, -7, -8, 2, 1, -8, -5, 5, -5, -6, -6, -7, -6, -1, -3, -4, -9, -10, 1, -7, -6, -1, -3, -2, 1, 2, 4, 0, -4, 4, 1, 2, 3, -10, -6, 1, -10, 2, 0, -6, 0, -8, -6, -2, -2, -5, -1, -8, -4, -4, -14, 1, -2, -2, -2, -2, -6, -1, 7, 3, -9, -5, -2, -2, 1, -2, -4, 1, 9, 3, 0, -5, -2, -2, 11, 0, -1, 2, -5, 7, 1, -6, -9, -1, -1, -6, -6, -1, -7, -15, -3, 0, 1, 3, 0, 2, 3, -11, 2, -4, 2, -3, -6, -2, 2, -6, 8, -1, -1, 3, -1, 8, -6, -4, -10, 2, -7, -11, 13, 1, -8, -9, -10, -5, 1, -7, 0, 1, 2, -20, -7, -5, -4, -2, -1, -4, 0, -6, -8, -6, -2, -8, 1, -5, 4, -7, -11, -1, -4, -9, -4, -7, 1, -6, 1, -4, 4, -2, -1, -2, -1, 2, -4, -5, 7, -3, 3, -2, -1, -5, 6, -2, -3, -4, 2, 7, -2, -4, -16, 3, 1, -6, -4, 2, -6, -11, -3, 1, 3, -1, -1, 4, 3, -9, -7, 3, -4, 5, -5, -5, 1, -5, 12, -1, 3, -3, 1, -5, -6, -4, -5, 1, 2, -2, 8, -3, 3, -1, -12, -4, -8, -9, -2, -6, -2, 1, -6, -3, 1, 0, 3, -2, 4, -6, 8, -5, -6, -6, 2, -2, -2, 1, -6, -2, 0, -5, -15, -4, -7, -5, -7, -4, 3, -11, 1, 0, -3, -16, -6, 0, -6, -1, -5, -2, 1, 2, -6, -1, -9, 0, 1, -3, 0, -7, -1, 0, -10, -6, -3, -4, -8, -3, -4, 3, 1, -10, -5, -6, -7, 8, 0, 3, -6, -3, -8, -7, -5, -8, 14, -1, -7, -3, -5, -3, 1, 1, -4, 3, 5, -10, -6, 4, 3, -2, -13, -1, -3, 0, -8, 0, -2, 3, -4, 3, 4, 1, -4, -5, -4, 0, 1, -5, -6, 2, -3, -5, -3, -9, -7, -6, 3, -6, -4, -4, -7, -8, -14, 1, -1, -9, -4, 1, 3, 1, -7, -3, 5, 4, 0, -6, -4, -2, -2, 3, 1, -1, -4, 3, -6, 5, -5, 2, -7, -8, -7, -7, -3, -2, 1, -3, -10, -18, -7, 1, -7, -21, -4, -6, 18, 6, 2, -7, 0, -1, 16, 3, -5, -5, -1, 0, -5, -2, -13, -6, -9, -5, -4, -4, -5, 
  -3, -2, 22, -11, 16, 3, -12, 29, -28, 2, -4, -20, -3, 0, -2, -6, -19, -17, -7, -28, 7, 21, -5, 8, -18, 36, 0, -23, 24, -12, 10, -4, 9, -28, 19, -7, 22, -6, -5, 12, -43, 18, 1, -21, -8, 0, 29, -14, -39, -45, 1, 11, 3, -2, -31, -8, -24, 4, 0, -35, 5, -22, -2, 1, -8, 0, -3, -10, 0, 0, -2, 3, -7, 23, 3, -20, 5, -2, 13, -1, -22, -24, 17, -11, -2, 19, 7, 2, -15, 1, 8, -34, 22, -20, -5, -6, -12, -13, 45, 41, -6, -2, -7, 7, -35, 11, 4, -9, 8, -7, -11, -9, -6, -23, -3, -3, 21, 13, -27, 0, 1, 4, 8, -16, 26, -12, -5, -7, -18, -4, 23, 19, -4, -5, 5, 8, -21, -20, 18, -8, 6, -8, -2, -20, -12, -31, 18, -6, -9, 3, 8, 3, -9, -9, -1, -28, 7, -7, 0, -3, -18, 2, -6, 6, 17, 8, -3, -8, 21, 11, -2, -11, -3, -7, -2, 4, -27, -11, -8, -10, 19, 27, -10, 23, -10, 15, 6, -15, 23, -25, 1, 11, -8, 8, 29, 22, 5, -3, 11, 3, -11, 3, -4, 12, -10, -3, 12, -7, -6, -5, 7, 7, -19, 10, -12, -1, 9, -5, -6, -31, 13, -15, 10, 7, -9, -6, 12, -9, 5, -9, 12, -2, -14, 21, 4, -10, 6, -2, -16, 2, -29, 0, 4, -27, 4, 26, -3, -2, -15, 0, 4, -16, 3, -39, -3, -4, 9, -4, 2, 38, -7, 4, 27, 2, -47, -6, -2, -15, -3, 0, 1, 3, -17, -11, 11, 12, -25, 3, -23, -4, -12, -17, 20, 0, -3, 2, 2, -5, -6, -17, 4, 4, 0, -1, 3, 4, -17, 11, -11, -13, -11, 4, 0, 15, -12, -30, -16, -22, 9, 11, -4, 12, 3, -9, 2, -2, 4, 6, 5, -8, 1, 6, 3, -2, 14, -1, 20, 13, -49, 12, 3, -24, 6, -13, 16, -7, -27, -45, 3, 7, -4, -3, -38, 10, -19, 14, 21, -43, 24, -16, 5, -13, -17, -10, 40, 8, 2, -11, 3, -10, -37, 17, 7, -34, 0, 1, 11, 9, -26, -39, 4, 7, -8, -1, -47, 17, -21, 19, -2, -10, -6, -20, -1, 8, -15, 25, 24, 30, 10, 1, 14, 1, -17, -11, -1, -2, 11, -4, -8, -26, -5, -18, -1, 0, -5, 31, -17, 31, 20, 23, 11, 5, 10, -8, 11, 6, 
  -16, -1, 0, -11, 1, -7, -6, 13, -26, -18, 4, -16, 6, 2, -23, 1, -24, -11, -5, -9, -15, 6, -15, 8, 0, 1, -1, -15, -3, -11, -4, -2, -7, -15, 4, -3, -3, 1, -3, 13, -7, -15, -5, -10, -4, -2, -14, 4, -17, -17, 0, -9, -5, 0, -29, 0, -26, -2, -1, -15, 6, -12, 1, -1, 12, -3, -7, -10, 2, 7, -13, -3, -24, -22, -3, -8, 0, -1, -18, -2, -17, -12, 3, -14, 2, 1, -17, 7, -5, 5, -4, -5, 1, -8, -5, -5, -12, -10, 1, 6, -6, -2, -11, 13, -11, -14, -10, 0, -6, -2, -28, 1, -5, -6, -1, -2, 5, -4, -16, 8, -9, -4, 2, -3, -8, -12, -1, 4, -7, -13, -2, -4, 11, -13, -5, -8, 6, -25, -10, -1, -2, -2, -13, 3, 6, 5, 5, 1, -7, -5, -15, -1, 10, -1, 1, -7, -2, -2, 3, 7, -7, -8, -1, -3, 26, -2, -8, 3, -23, -10, -8, -3, 3, 2, -2, 1, -18, -11, 0, -10, -4, -2, -13, -3, -13, 4, -5, -17, 1, -9, -1, 11, 0, 2, 3, -7, -1, -7, -11, 8, -22, -13, -2, -11, -1, 3, -22, -1, -11, -8, -4, -3, -3, -5, -17, 0, -2, 2, 0, -18, -8, -16, 8, -6, -6, 4, -5, -10, 16, 0, -3, 2, -21, -12, 0, -19, -5, 3, -7, -7, -17, -5, -7, -11, -3, 3, -27, 3, -13, -1, -4, -29, 1, -13, 7, 0, -3, -8, 0, 9, -9, -5, 15, 5, -5, -17, -5, -6, -9, -5, -4, -2, -4, -4, 0, -15, -10, 6, -14, -1, -15, -4, -9, -1, 1, -12, 4, -3, -8, -7, -1, -2, 17, 2, -10, 3, -40, -16, -2, -14, 3, -2, -11, -4, -12, -18, -1, -8, -8, -3, -28, 11, -20, 6, -5, -13, -3, -4, 1, 6, -6, -7, 6, 4, 3, -1, 2, 7, -28, -11, 2, -24, 6, 3, -4, -6, -15, -13, 4, -4, -1, -2, -9, 4, -10, 1, 1, -24, -1, -7, 5, 1, -9, -2, -3, -11, 16, -3, -10, 0, -25, -9, 1, -10, 0, -3, -5, -4, -4, -8, 4, -10, -11, -6, -20, 10, -4, -10, -4, -9, 2, -14, -4, -8, -18, -10, -7, -1, 5, 0, -7, 0, -27, -15, 2, -16, -2, -3, -5, 5, -28, -15, -1, -1, -12, 1, -18, 4, -23, -2, 2, -35, 9, 4, 3, -6, 
  -6, -5, -1, -5, 0, 2, -4, -5, -7, -3, 3, 0, -5, 0, -6, 1, 0, 0, 0, 3, -7, -6, -3, -4, -1, -5, -1, -4, -2, -1, 3, -8, -6, -1, -7, -7, -2, 2, -5, -2, -4, -3, -4, -6, -6, -7, -1, 4, 1, 2, -5, 3, 0, -7, 1, -1, 2, -1, -5, 2, -4, -3, 3, -2, 1, 2, 2, 1, -4, -2, -5, 2, -1, 0, 2, -4, 2, 3, -4, 2, 0, 1, 0, 3, -6, 6, -2, 2, -7, 3, 2, -3, -5, -6, 6, -1, -4, -6, -7, 1, 0, -4, -2, -4, -6, -4, -4, 0, -6, -5, -7, -1, 3, -3, -4, -1, -6, 0, -1, 0, -2, 0, -5, 3, -7, -1, 1, 3, -4, 2, -3, -6, 0, 0, 3, -5, -6, -1, 3, -4, 4, -3, -3, 3, -2, -5, 1, -6, -4, -6, -5, -1, -7, -3, 0, 3, -4, -1, -1, -7, -3, -5, 1, 3, -2, -5, 2, -6, -6, -1, -5, -2, 3, 7, 4, 1, -2, 6, 1, 2, -4, -1, -6, -1, 3, -3, -1, -2, -2, -1, -2, 0, -7, -6, 2, -3, 0, -7, 5, 3, 2, 3, -1, 2, 3, -1, 0, 0, -2, 2, 2, -2, 0, -1, -2, -1, 1, 3, -3, 4, -7, -8, -3, 1, 2, 4, -1, 2, 0, 4, -4, 3, 1, -4, 2, -3, 2, -3, 3, -2, 0, 4, 1, -3, -2, 3, -6, 2, -5, 2, -2, 1, -3, -2, -5, -6, 3, -2, -2, -5, -2, -2, 3, 3, 2, 2, -2, -1, 3, -4, -1, -2, -6, -5, 3, 0, -7, 2, -5, -1, 4, -6, -1, -3, -5, 0, 0, -5, -5, 3, -7, -5, -6, -5, -3, 1, -1, 1, 0, -8, 1, -6, 3, -6, 2, -2, -4, -5, 0, 0, -7, -5, -1, -5, 3, -6, 0, -10, 2, -4, -3, 3, -1, -1, -3, -3, 2, 7, -2, 2, -4, 3, -2, 1, -3, 2, 3, -5, -3, -5, 2, 2, -5, -4, -4, 3, 0, -1, 6, -1, 1, 2, -3, -4, -2, -2, -4, 0, 1, 3, -1, -2, -7, -6, -2, -5, -1, -6, -5, -3, -5, 1, -4, 2, -5, 1, -2, -5, 0, 1, -3, -3, 0, -6, 3, -6, -4, 2, -2, -1, 3, 4, -4, -5, -7, -3, 3, -7, -5, -2, -2, 3, -5, -4, -2, -5, -1, -4, -5, 1, -2, -5, 2, -14, 3, -3, 
  6, -6, 10, 5, 5, 7, -1, 14, -27, 25, 14, -17, -7, 3, 3, -5, -36, -29, 0, -17, 12, 20, -16, 5, -16, 20, 1, -31, 8, 8, -8, -9, 16, -1, -1, 3, -17, -5, 5, 5, -17, 14, -4, -19, 4, 3, -8, -3, -45, -12, -10, -26, -3, 8, -37, -2, -27, 26, -5, -35, 4, 6, -3, -8, 21, -2, 4, -3, -4, 7, 14, 2, -2, 20, 0, -4, -6, -8, -14, 27, -27, -12, -4, 5, 22, -22, -21, 10, -10, 7, -6, -18, 7, -27, -14, 0, -10, -2, 7, -4, 0, 0, 9, 0, -3, 6, 15, -4, -7, 0, 7, 16, -23, -14, -1, -8, 12, -2, -16, -1, -1, -4, -8, -28, -4, 13, -9, 4, -11, -16, 8, 38, -7, 1, 4, -3, -7, 13, 11, -2, -3, -4, -10, 14, 7, 5, -7, 21, 2, -5, -2, 0, 10, -1, 1, -11, -13, -8, -8, -2, 0, -6, 3, 2, 9, -3, -2, -2, 16, 2, 1, 9, -7, 8, -7, 12, 5, 6, -3, 0, 13, -2, 5, -2, 2, 21, -11, -13, -11, -1, 1, -6, 2, -11, 15, 10, -10, -15, 21, 18, -25, 22, 7, -21, 4, -3, 3, 12, -26, -13, 3, -19, 1, 6, -20, 3, 5, -1, -3, -20, -3, 1, -6, 3, -17, -7, 2, 7, -9, 3, 6, -11, -7, -10, 22, -10, -3, 2, -10, 4, -22, -9, 1, -5, 11, -3, -33, -1, -2, 14, -17, -15, 18, -9, -7, -5, 1, -14, 3, 24, -2, 3, 39, 9, -8, 37, 9, -2, -10, 7, -2, 0, -32, -17, 7, -4, -2, -1, -18, 5, -26, -6, -18, -21, -11, -6, 13, 1, 2, 20, 3, 13, -8, 10, 8, 19, -26, 26, 2, -11, -2, -3, 13, 20, -30, -15, 0, -7, 17, 22, -16, 17, -3, 26, -12, -21, 4, 19, -3, 8, 15, -8, -7, 25, -9, 8, 6, -1, -27, 14, -2, -21, -4, -10, -14, 6, -23, -18, 4, 10, 18, -7, -18, 12, -14, -4, -13, -29, -7, 7, 11, 7, -9, 21, 7, 2, 0, 1, 14, -6, -34, 44, 7, -23, -1, -1, 7, 7, -26, -25, -4, 8, 16, -9, -35, 11, -10, 13, -16, -26, 2, 26, 13, -3, -14, 17, 11, 36, 7, 11, 15, 0, -38, 23, -5, -13, 7, 1, 13, 9, -35, -17, 1, 25, 18, -8, -46, 2, 18, 20, 1, -9, 1, 18, -3, -4, 
  -14, 5, -1, -5, -7, -9, -7, 8, -14, -9, 5, -2, 6, -4, -5, 1, -2, -14, -5, -4, -5, -2, -8, 8, -17, 2, -7, -9, -11, -13, 0, 0, -6, -4, 1, -9, -6, -8, -1, -6, -10, 3, 1, -3, -1, 2, -7, -3, -12, -3, 0, -7, 6, 0, -13, 0, -4, -4, -4, -15, -5, -6, -3, 2, -10, -10, 1, -14, -9, 0, -7, -2, -7, -3, 5, 1, 1, 5, -19, -6, -8, 1, 5, -6, -4, 2, 1, -4, -9, 2, 4, -8, 3, -15, 0, 0, -7, -7, 6, 11, -6, -2, -5, 3, -5, 5, -4, -1, -6, 5, -10, 7, -7, 3, 6, 2, 3, 3, -11, -3, -7, -4, 2, -10, 7, -2, -6, 4, -8, -8, -3, 3, -6, -2, -8, 2, -11, -5, -1, 0, -1, -4, -12, 0, -2, -2, 1, -6, 0, -5, -15, 5, 2, -2, 1, -13, -7, -1, 1, 0, 2, 3, 0, -2, -7, -5, -11, -1, -5, -9, 0, -2, -3, 4, -11, 9, -10, -4, -2, -8, -8, -7, 0, -5, -1, -1, 0, 0, -4, -14, -2, 4, 4, 0, 4, -4, -16, -10, -3, 1, -7, 1, 2, 3, -6, -5, -12, -5, -6, -7, 1, -8, 1, 3, -9, -2, -3, 1, 0, -7, -2, -1, -3, 1, -12, -3, -5, -5, -2, -7, -4, -13, -3, -3, -3, 1, -4, -4, -5, -7, -8, -1, -1, -7, 1, 2, -1, -4, 5, 1, -1, -2, -1, -19, 7, -3, -6, -6, 1, -2, -2, 4, 0, -4, -7, -2, -5, -3, -3, 2, -4, 0, -6, 2, 2, 1, 3, 0, -9, 8, -2, 0, -9, -3, 0, -14, -5, -3, -13, 0, 5, -9, -8, -1, -2, 3, -7, -10, -4, -4, -7, -1, -6, 0, -7, -10, -9, 4, -6, 3, -12, 7, 1, -4, -2, -5, -6, -10, -1, 1, -12, -9, -6, 1, -10, -5, 1, -2, 1, 0, -2, -2, -2, 2, -6, 3, -5, -3, -1, 6, -11, -3, -8, -2, 0, 0, -1, -13, 3, -17, 3, -6, -17, -11, 6, -9, 0, -3, -4, -12, -13, -3, 3, 3, -7, 2, -1, 4, -17, -2, 4, -3, -2, 6, -5, -1, -13, 3, 3, -9, 1, -12, 5, 5, -15, -2, 0, 1, -3, -2, -8, -2, -10, -8, 4, -10, 5, 1, -9, -4, -14, -19, 1, 6, 6, 0, -6, -1, -4, -2, -4, -11, 6, -9, 2, 1, 
  9, -32, 2, 22, -5, -13, -5, 5, 12, 6, -7, -8, -10, -4, -5, 11, 4, 15, 5, 0, 8, 1, 11, -7, -12, 3, -2, 19, -5, 6, -4, -5, 5, -23, -2, 15, 0, -2, -4, 0, -12, 6, -6, -5, -10, 4, -10, -4, 13, 6, -4, 20, -16, 12, 17, 3, -65, -7, -10, -15, -10, 0, -9, 7, -36, -10, -1, 25, 9, -1, -9, 6, -9, -7, -6, -9, 5, 3, 13, 23, 9, 3, -5, 24, 1, -1, -7, -6, -43, 11, -11, 2, -13, -8, -6, -7, -3, 2, 4, -21, 0, 5, -3, -4, -3, -5, 1, -20, -5, 1, 9, 12, 1, 3, -11, 3, -3, -3, 5, 6, -36, 15, -19, -12, -13, -7, 1, 2, -27, -14, 4, -5, 4, -4, -8, -4, -8, -11, -3, -11, -1, -5, 11, 10, 4, 19, 1, 15, 4, 8, 13, -9, -49, 9, -10, 8, -6, -5, 1, 2, -29, -28, -3, -8, -18, 1, -3, 6, 4, 0, -4, -14, -8, -2, -2, 1, 16, 10, 4, 12, 4, -9, 16, -6, -45, -3, -21, 18, -7, -19, -7, -5, -22, -27, -5, -3, -13, -10, -13, -6, 17, -14, -5, -8, -1, -1, 6, 4, 32, 25, -2, 16, -26, -6, 60, -2, 6, 2, -2, 20, 11, -21, -5, -11, -11, -6, -12, -10, -19, -10, -5, -3, 26, -20, -2, 7, 3, 2, 5, 4, 34, 23, 4, 12, 9, 3, 38, -4, -18, -6, -1, 35, -5, 1, -8, -9, -54, -13, -3, 1, 6, 3, -8, -1, 9, -5, 2, -16, -1, 3, 13, 0, 4, 12, -6, 34, -8, 2, 7, -5, -54, -9, -6, 13, -15, -6, 2, -8, -17, -30, -9, 5, 16, -4, -10, 6, -11, -32, 0, -8, -8, 1, -4, 9, 28, 14, 2, 7, -17, 9, 12, -4, -19, 0, -4, 14, -3, -9, 3, 1, -15, -5, -11, -25, 8, -1, -7, 3, 25, -15, -2, 7, -6, -2, 0, 3, 9, 20, -8, -8, -19, 1, 28, -5, 12, 36, -18, 8, -3, 3, 3, -3, 4, 0, -10, -39, -11, -9, -2, 0, 40, -25, -6, 7, -6, 8, -4, -5, 16, 15, 3, 15, -8, 2, 38, 4, 11, 6, -13, 8, -12, -25, 5, -12, -17, -4, -4, -8, 1, -6, 16, 4, 14, -19, -2, 8, 5, 5, -4, -4, 17, 2, 3, -5, -32, -7, 25, 3, -4, -13, -15, -11, -15, -11, -3, -10, 
  -2, 4, 5, -2, -1, 5, -3, 12, -7, -1, 5, -2, 8, 1, -7, -6, -10, -12, -9, -7, 1, 2, -10, 3, -6, 2, 2, -9, 5, 3, -4, -2, 5, 2, -1, 3, -3, 2, 7, 3, -7, -1, 4, 4, 7, 3, 2, 1, 0, -7, -4, -3, -2, 3, -16, 0, -5, -6, 7, 0, -3, -4, -2, 2, -3, -5, 2, -1, -4, 1, 4, 0, -8, 0, 6, 2, 0, -3, -8, 4, -1, -9, -2, -4, -2, -3, -1, 2, -10, 2, -5, -3, -3, -7, 5, 1, -5, 3, 7, 7, -4, 0, -5, 1, 8, -3, -1, -2, 1, 6, -2, -9, -1, 3, -5, -1, 1, 5, -9, -2, -3, -1, -4, 0, -4, -13, 0, 1, -2, -10, 1, -2, 0, -2, -4, -8, 0, -6, 1, -6, -4, 3, -2, 2, 5, -12, -2, 4, -11, -1, -6, 4, 3, -6, 0, 0, -4, -4, 3, -6, -6, -3, 3, -4, -8, -1, -1, 4, -8, -6, -1, -6, 0, 1, 2, -3, -3, -6, -5, -7, 0, 3, -4, -3, 4, -3, 0, 0, -5, -7, -6, 2, -6, 2, -3, 2, -3, 2, -2, 12, -2, 0, 4, -3, 0, 5, -1, -3, 5, 1, 3, 3, -6, 0, -3, 1, 0, -7, 4, 0, -3, -6, -5, -5, -1, -6, -3, 1, -4, 1, 5, 3, -7, -5, -2, -2, 1, 2, -5, -10, -1, -6, 2, -1, -3, -2, -6, -5, -6, -3, 4, 2, -5, -6, 6, -7, -4, -11, 0, 1, -4, -3, 3, 2, 3, 2, 5, -2, -8, 2, -2, -4, 0, 1, 0, -6, -7, -1, 2, 5, -7, -5, -4, 5, -8, -7, 6, -3, 0, -10, -7, -4, 2, 3, 1, -2, -6, -1, 3, -4, -3, 0, -1, 3, -7, -1, -5, -9, -7, 2, 1, 0, -1, 2, 0, -6, -3, -4, 2, 1, 5, -1, 5, 1, 0, -5, -4, 5, -6, 0, -3, -2, 1, 8, -5, 0, -7, -3, -4, 2, -4, 4, -12, 9, -11, -3, 6, -1, 6, -1, -2, -3, -2, -8, 3, -5, -5, -2, 5, 3, -4, -3, 1, -6, -4, -1, -6, -1, -4, -10, 0, 1, -3, 4, -4, 10, 1, -2, -5, -10, -1, 0, 3, -7, -3, -1, 1, -2, 1, -10, -4, 10, -2, -6, 0, -1, 0, 6, 4, -5, -3, -4, -6, -4, 1, -5, -8, 3, 0, 2, -4, -2, 3, 4, 5, -3, 
  -1, 3, -18, 6, -12, -14, -7, 8, 16, 9, -3, -10, -9, 9, -6, 3, 16, 0, 4, -4, 5, 1, -2, -7, 10, -2, -4, 11, -11, -13, 5, 4, -10, 10, -3, 26, 13, -13, -6, 3, -17, 1, 2, -10, -8, -1, -5, 10, -9, -10, 5, -5, 11, 8, -20, -9, -10, -17, -1, -11, 3, 13, -2, 11, 2, 5, 9, 27, 18, 4, 2, 6, -25, 1, -7, -15, -5, 3, -8, 27, -8, -12, -7, 11, 0, 9, -20, -5, 9, -1, -4, 0, 3, -7, -8, 3, 26, 2, 5, 16, -16, -6, -8, 13, -18, -8, 8, -10, 8, 10, 11, 13, 5, 8, 3, 11, -3, 5, 2, -9, 19, 17, -7, 0, 11, -17, -5, 14, 0, -3, 0, -18, 3, 2, -6, -2, 14, 0, -8, 3, -6, 5, 3, 10, 23, 22, 5, 7, 3, 0, 5, -18, 9, 5, 0, 9, 6, 9, 27, 3, 17, -12, 15, -15, -10, -9, -5, -9, 8, -2, -3, -11, 4, -4, -3, -14, 17, 7, 2, 1, -15, -6, 16, -6, 7, 0, -6, 27, -10, -1, -6, 11, 10, -20, -7, 7, -24, -3, 1, -4, -4, 11, -5, 3, 2, -1, 1, -10, 6, -7, 3, -3, -16, 10, 14, -2, 5, 8, -9, 10, -15, -25, 7, 8, 5, -7, -7, 12, 4, 0, -6, -1, 15, 4, 0, 10, 6, 8, 4, 6, 27, 15, 11, 14, 6, 6, -3, 2, 7, -1, -3, 16, -10, -5, 2, 4, 4, -8, 10, -7, 3, -3, -18, -3, 11, -11, 0, -8, 0, 8, -11, 2, 27, 15, -4, 5, 6, 9, -12, 10, -3, 13, -15, 9, -8, 17, -5, 5, -16, -6, 11, 7, 0, -2, -4, 1, 4, -7, 0, 18, -10, 5, -17, 4, 13, 7, 0, 13, 2, 3, 9, 0, 7, -3, -15, 13, -21, -9, -13, -1, -4, -6, -4, -6, -6, -1, -19, 0, 11, -17, -6, -5, 0, -1, -18, -2, 26, 16, 0, 12, -1, 7, 8, -3, 20, 17, -6, 16, -1, -22, 8, 5, 5, -22, -5, -22, -8, -4, 7, -6, 0, -15, -5, 7, -2, -1, -13, -11, 22, -3, -3, -3, -6, -3, 13, 4, 22, 19, -9, 8, -4, -14, 6, 6, 21, -9, -1, -8, 6, 3, -12, 8, 17, 5, -3, 1, -5, 8, -4, -11, -6, -10, -8, -46, 14, -4, 14, 7, -5, 20, -14, 1, 7, -16, 3, 7, 
  4, 2, -3, 11, -14, -3, -5, 19, -18, -4, -1, -10, 5, 1, -19, 5, -17, -21, -3, -15, -8, 2, -18, -5, 0, 6, -6, -21, 4, -4, 4, -4, 4, -2, 6, 4, -2, 1, 1, 4, -16, 4, -7, -8, -3, -2, -12, -4, -15, -7, -4, -7, -2, -4, -17, 2, -4, 2, -8, -16, 6, -16, -7, -4, 2, -1, -1, 0, -1, -7, -5, -1, -2, -5, 3, 6, 3, -4, -7, -1, -3, 0, -5, -3, 1, -7, -2, 1, 7, 1, -4, -10, -2, 2, 4, -12, 0, -12, 0, 3, -1, -11, -3, -5, -3, -11, 4, 1, 1, 1, -15, 0, -7, -2, -4, -16, 1, 4, -18, -1, 0, 6, 2, -13, -13, -1, -7, -4, -3, -7, 3, 1, -4, -11, -2, -4, -11, -9, -8, 4, -3, -1, -3, 4, -8, -12, -4, -9, 1, 5, -3, -3, -11, 2, 2, -18, -14, 1, 2, -6, 0, -5, 3, -8, -2, 0, 0, 3, -17, 6, 5, -10, 5, 3, -1, 4, -17, -7, -6, -7, 1, 1, -13, 3, -8, 1, -2, -10, -1, 1, 2, 1, -3, -5, 4, -5, -13, -13, -2, 8, -19, -1, 2, -7, -3, 1, 2, 5, -11, -2, -7, -21, -13, 1, -13, 1, -18, 4, -2, -24, -5, 9, 0, -10, 2, 1, 2, 12, -5, -2, -11, -9, -19, -11, 2, -1, 8, 2, -9, 2, -20, -13, -6, -1, -7, -5, -3, 1, -4, 1, -5, -23, 2, -4, 6, -6, 12, -2, 5, 6, -2, 5, 6, 5, -17, -5, 1, -2, -7, -5, -9, -4, -9, -4, -2, 3, -11, 7, -12, 0, -3, -3, -2, -9, -9, -11, -1, -6, 8, -2, 1, -7, -3, -1, -5, 8, -6, -5, -1, -12, 4, -1, -5, 1, -11, -3, -5, 8, 2, -4, 1, 8, -13, 6, -5, -9, -7, 2, -4, 1, 3, 0, 0, 3, 0, -9, 3, 4, -13, -3, 4, -4, 10, 3, -7, 1, -21, -11, 2, -10, 12, -6, -10, 16, -21, -3, 3, -14, -8, -4, -1, 1, 4, 4, 4, 2, -10, 10, -2, 0, -19, -1, 0, -11, 1, -3, 8, -2, -15, -22, -3, 2, -8, -6, -30, 2, -14, -2, -5, -16, 5, 0, -3, -5, -3, -1, 2, -6, 0, 4, 2, 0, -19, -10, 6, -2, 3, 3, -2, 3, -23, -12, 1, 2, 6, 0, -21, 10, 1, 2, 3, -19, 7, 3, 0, -3, 
  -13, -23, -10, -7, -35, 4, -5, 8, 13, -16, 3, -15, 2, 0, -13, 9, 11, -2, 0, -22, -23, 13, 11, -8, -30, -4, 3, -3, -17, -14, 1, -10, -12, -10, -2, 0, 12, 0, -7, -1, -21, -18, 4, -19, -3, 3, 12, 1, 22, -13, -7, 20, -28, 8, 3, -3, -67, -7, 7, -8, -18, 7, -4, -1, -26, -30, -7, -1, 36, -6, -4, -4, -1, 16, -5, -22, 0, -5, 6, 16, 7, 22, -5, 10, -2, -4, -7, 3, -36, 9, -19, 12, -3, -3, -11, -4, -8, -32, 10, -4, 23, -2, -4, -8, 24, -9, -2, -16, -8, -5, 24, -3, 7, 24, 4, 23, 0, 4, 29, -4, -26, -4, -19, -3, -25, 8, -11, 7, -13, -17, 0, -10, 24, 2, -6, -1, 6, -2, -4, -15, 0, -2, 3, 4, -1, -7, -3, 4, -8, 8, -4, -3, -19, 23, -4, 5, -12, 19, -6, -5, -9, -16, 12, 14, 0, 2, -6, 14, -26, -3, -6, -25, 0, -6, -4, 1, 16, -33, -5, 7, 7, -1, 4, -2, -54, -11, 11, 2, -16, -2, -4, -2, -15, -8, -8, 1, -15, 2, 3, 0, 12, -11, 1, -21, 12, -7, 1, -3, 19, 10, 2, 5, -9, -14, 29, -5, -52, 23, -18, -13, 16, 19, -1, 6, -25, -20, 5, 15, 6, 0, 5, -4, -17, -17, -1, -18, -2, -3, 4, -13, 2, -7, -5, 1, -3, -9, 20, -4, -11, -14, 4, -9, -5, 17, -2, -6, -23, -24, 1, 14, -11, -4, 1, 0, 0, -36, 4, -25, 6, -2, -5, -8, 8, 12, 0, 38, -2, -2, -6, -1, -22, 1, 7, 14, 2, -2, -4, -1, -25, -18, -15, -1, -13, -8, 0, -9, 10, -11, -4, -2, -3, -1, 7, 12, 22, 19, -2, 22, -23, 0, 5, -4, 7, 3, 11, 4, -10, -28, 3, -9, -9, -51, 1, -29, -12, -2, 1, -12, 24, -19, 4, 4, 1, 7, -3, -10, 22, 42, -2, 0, -9, -13, 62, -1, 10, 21, 29, 20, -13, -19, -11, -8, 3, -1, -9, -6, 4, -8, 0, 1, 25, -38, 1, 7, -9, 8, -12, -8, 23, 18, 3, 34, -7, 0, 21, -7, -4, 16, 13, 6, -21, -12, 8, 9, -76, -12, -1, -16, -22, -1, -4, 11, 5, -20, 1, -7, -4, 5, 0, -10, 6, -1, 0, -7, -14, -5, -7, -3, 12, -21, 5, 7, 3, -8, -1, -8, 
  -51, 24, -7, -8, 3, -4, 2, -3, 13, -1, -4, 7, 0, 2, 8, 9, 10, 21, -3, -57, -12, 7, 12, -2, -9, -45, 3, 16, -6, -5, -1, 1, -30, -8, 4, -11, -24, 0, 10, -5, 28, -32, -2, 24, 1, -2, 18, 20, 10, 12, 5, -33, -12, 1, 11, 3, 5, -92, -15, -2, -13, -4, -6, -1, -79, -1, -7, -20, -4, 3, 5, -4, 4, 5, -4, 21, 4, -2, -2, 24, -5, 5, 0, -17, -17, -12, -6, -6, 8, -21, -1, -21, 3, -19, 3, 2, -18, 5, 2, -6, -4, -4, 5, -2, -19, -6, 1, 14, -2, -9, 2, 23, -20, 6, 2, -17, -10, -4, 5, 3, -31, -42, 6, -19, -8, -10, 1, -2, 0, 16, -6, -26, 1, 3, 6, 2, 16, -12, 1, 4, -3, 0, 2, 24, -8, 10, -1, -39, -14, -5, -10, 2, 11, -56, 10, -3, -3, 9, 7, 1, -7, 16, 3, -2, -17, 3, 3, -6, 4, -21, -1, 44, 4, 0, -19, 24, 16, 31, 3, -23, -16, 1, 7, 4, 15, -96, 11, -4, -18, -14, -3, -3, -62, -1, 2, -12, 0, -3, 0, -5, 25, -3, 3, 31, -1, -7, -19, 16, 2, 40, 5, -40, -27, 3, 34, -1, 17, -61, 5, 2, -35, 7, 12, -1, 5, -2, -2, -31, -3, -9, 2, -7, 31, 3, 1, 14, -4, 0, -16, 22, 3, 37, 1, -41, -12, 0, -6, 6, 20, -49, 3, 3, -20, 7, 7, -5, -31, 7, -2, -1, -20, -12, 1, -4, 15, -31, 5, 23, -2, -3, 0, 20, 13, 19, 2, 11, 0, 16, 17, -2, 15, -67, 11, 4, -25, -6, 9, -7, -11, 5, 5, -1, -8, -5, 1, -1, -6, -2, -8, 18, 1, -9, 0, 25, -13, 8, 2, -24, 1, 3, 8, -3, -12, -80, 1, -6, -11, -16, -2, 4, -33, 15, -10, -6, -15, -9, -3, 2, 8, -1, -6, 4, -6, -11, 14, 25, -6, 8, -7, -47, -1, -12, 6, -3, -5, -33, 1, -12, -21, -1, 11, -3, -25, -21, -2, -13, -1, -1, 4, -4, -10, 5, -5, 8, 3, -3, 5, 9, -6, 10, -2, -15, -13, 9, -4, -2, -2, -20, 17, -18, -13, -14, 1, 0, -27, -22, 2, -19, 9, -1, 0, 2, 5, -13, -7, 10, 6, 1, -3, 33, 5, 29, -2, -22, 6, 7, 7, 1, 20, -73, 13, -14, -14, 10, -7, -4, 
  4, 18, -5, 0, -6, 5, 1, 5, -3, 27, -4, -6, -7, -5, 7, 17, 7, 5, -5, -9, 27, -7, 3, -2, 6, 0, 6, -4, 9, -1, -9, 2, -17, -9, 9, 21, -3, 7, 1, 1, 25, 9, 1, -8, 0, -5, 9, 7, 15, -4, -3, -1, 20, -8, 16, -18, -40, -32, 9, 6, 14, 11, -4, 9, -28, 0, -17, 1, 4, -1, 5, -6, 11, 9, -2, -7, -2, -6, 1, 19, 4, 4, -5, 3, 16, -5, -2, -4, -6, -5, 6, 5, 8, 7, 0, 2, -19, -11, 1, -3, -13, -8, 3, 4, -20, 13, -1, -13, 4, -1, 4, -3, 0, -3, 4, -3, 15, 8, -11, -8, -7, -17, -11, -8, -5, 8, -8, 4, -8, -21, 6, 8, 0, -12, 3, -1, 9, -1, -6, -7, -1, 5, 6, 8, -6, 8, 2, -6, -5, 1, 7, -4, 7, -24, -1, 8, -10, -7, -8, -7, -19, 1, 5, 1, -16, 5, 6, -3, 10, -15, 3, -2, 6, -5, -1, -5, 11, 8, 7, 7, -15, -10, 13, -3, 8, -25, 6, 18, -3, -8, -4, 0, -3, -17, -3, 19, -17, -15, 0, -5, 13, -32, 2, 4, 5, 4, -4, -8, 18, 21, 5, 3, -1, 8, 25, -6, 18, -4, -1, 19, -4, -16, -5, -7, -19, -22, 1, -8, -6, -15, -3, 2, 6, -20, 1, -2, -10, -4, -4, -11, 18, 9, 6, 1, -18, 9, 5, -2, 5, -19, 2, 17, -3, -8, -3, -1, -9, 0, -2, 5, 6, -10, 4, 14, 11, 12, -5, -11, -3, -3, 16, -1, 7, 15, 6, -6, 0, 2, 4, 7, 9, -1, 1, 9, -2, -10, 5, -8, -6, 2, -5, 8, 4, -8, -4, -2, -3, -21, -2, -3, -11, 2, -9, 18, 7, 19, -1, 8, -14, 11, -2, 7, 7, -29, 7, 0, -21, -18, -8, -3, -8, -1, 2, -10, -11, 2, 5, 6, 5, -27, -3, 5, -4, 4, -7, -8, 2, 2, 2, -18, -15, -6, 1, 10, -22, -22, 9, 2, 3, -17, -5, 7, -9, -6, 9, -14, -30, 6, 11, 5, 16, -23, -4, -8, -4, -4, -11, -5, 18, 27, 8, -8, -16, -11, 21, -3, -16, -21, 3, 19, 0, -7, -11, 7, -37, 4, -9, -3, 2, -6, 4, 9, -2, -20, -2, -3, 4, 1, -2, 11, 7, 12, -2, -34, -16, 10, 16, 3, -16, -66, 4, -10, -6, 0, -6, -9, 
  18, 20, -13, 6, -11, 0, 7, 12, 13, 11, -4, -5, -13, 0, 5, 6, 28, 8, -1, 5, 19, -5, 9, 3, 15, 8, 11, 17, -13, -11, 11, 7, -13, 2, 0, 37, -4, 13, 9, 10, 0, 21, 3, -2, -3, 8, 17, -4, 16, -15, 4, 13, 30, 11, -2, -7, 11, -13, 2, -2, 18, 9, -8, -2, -7, 10, 12, -1, -8, -1, 7, -4, 3, -14, -3, -5, 7, -1, -6, -1, -4, 3, 4, 9, 6, 8, -8, -6, -2, 0, -11, -9, 0, 0, -20, 3, 30, -12, -4, -3, -7, -13, 1, 14, -12, 0, -4, -14, 1, 5, 10, 14, 8, 11, 5, 11, -2, 1, 15, 3, 18, 3, -21, 7, 15, -15, 6, 11, 6, 1, -5, -24, 19, -2, 11, -8, 8, -10, -6, -2, 3, -4, 7, -4, 17, 24, 0, -14, -5, 4, 0, -15, -5, 2, 0, 6, 16, 1, 0, 7, 8, -6, 6, -22, -12, 1, 25, 9, 26, -4, -5, -2, -2, 4, -11, -13, 7, 25, 1, -9, -7, 1, 18, -15, 7, -7, 0, 15, 7, -5, -7, -1, 9, 4, -14, 20, -5, -6, 20, -15, 23, 10, -5, 5, 5, 4, 9, -8, 14, 12, 1, -2, 2, 14, 31, -15, 1, 13, 0, 33, -12, -12, 5, 1, -18, -21, -5, 6, -5, -11, 6, -2, -1, 5, -11, 4, -10, 8, -22, -11, 8, -1, 0, 1, -11, 4, 13, 0, 5, -16, 4, 29, -22, 1, 7, 7, 7, -30, 4, 10, 3, -6, -1, -7, 29, -26, 5, -6, -4, 1, -6, -3, 20, 17, -8, -5, 0, 10, 2, 5, 19, 24, -2, 21, 5, -37, 3, -1, -11, -5, 10, -3, 3, 3, 3, 2, 20, -15, -5, 7, -8, 4, -21, 9, 23, 11, 0, 22, 1, 6, 30, 1, 9, -12, -3, 32, -9, -18, -10, -8, -9, 2, 0, 4, -12, -8, 9, -3, 11, -28, 0, -7, -7, -3, -14, 4, 15, -2, 4, -2, -6, -5, 19, -7, 2, 17, 9, 4, -4, -12, -7, 8, -9, -19, -10, -11, -18, 2, 21, -6, 16, -43, -2, 6, 3, -3, -30, -28, 17, 19, 1, 0, -22, 3, 22, -4, 37, 16, 7, 28, 3, -22, -27, 1, 19, 22, -3, 13, -2, 1, -2, 3, 15, -25, -5, -4, 1, 17, -14, -15, -11, 2, -1, -30, -1, -3, 15, 2, -1, 18, -25, -1, -2, -26, 2, 0, 
  -14, -13, -4, 5, -16, -13, 10, -3, -7, -14, -1, 2, -1, -1, -5, -6, 0, -4, 0, -7, -10, -4, -1, -11, 10, -9, -2, -10, -9, -26, -4, 2, -35, -13, 4, 14, -1, 0, 15, -7, 12, 0, 8, -9, -2, -3, -23, 1, -8, -13, -4, -13, 6, -4, -11, -4, -15, -24, 7, -15, 4, -4, 0, -9, -19, -10, -4, 34, -26, -14, 7, -8, -19, 0, -4, -7, 7, -6, -8, -8, -8, -12, -2, -16, -7, -3, -7, 3, -14, -28, 18, -10, -14, 2, -8, -10, -19, -15, 0, 16, -16, -9, 3, -4, -5, -5, -5, 3, -2, 1, -6, 0, -6, 6, 0, -1, -10, 1, -2, 6, 10, -8, 14, 6, -5, -27, -5, -3, -11, -4, -2, -15, -19, -6, 11, -4, 21, -20, -6, 10, -3, -1, -9, -6, -1, 10, 3, -2, -1, 2, 25, -17, -3, -9, 4, -6, -6, -21, -11, 11, -31, -7, -2, -9, -18, -15, 8, -3, 5, -8, 0, 15, 6, -13, 0, -1, 1, 8, -3, 6, -13, 9, 7, -14, 3, -13, -1, 13, -12, -16, -2, 3, -29, -24, -1, 8, -19, -14, 25, -7, -7, -13, -1, -10, 10, -4, -2, 0, 10, 3, 0, -6, -15, 2, 20, -12, -2, -16, 9, 8, -19, -33, -12, -1, -13, -7, -8, 15, -15, 0, 15, 1, -3, 9, 4, 1, 7, -3, 2, 6, -9, -8, -4, -25, -8, 3, 1, -2, -2, -26, 5, -8, -1, -9, -10, 2, -5, 1, -4, -6, -18, -2, -3, -5, -4, -13, 18, -19, 1, -3, -3, -11, 3, 4, -8, -4, -2, -1, -19, -4, -7, -18, 9, -15, 1, -11, 1, -9, -10, -14, 3, 22, -13, 2, 14, 1, -7, 5, 10, -7, -4, -8, -17, -16, -13, -2, -3, -11, -11, 5, -8, -1, -3, 0, 1, -14, 3, -3, -2, -5, -21, -10, 6, 27, 9, -4, 8, 0, -8, 9, 11, -9, 3, -6, -11, -5, 2, 0, -7, 13, 5, 1, -7, 1, 5, -9, -11, -8, -3, -1, 3, 2, 4, -15, 1, 32, 5, -1, 17, -2, -2, -11, 10, -7, 1, 6, -9, 1, 0, 10, -8, -7, -5, 2, -4, -7, 0, -8, -1, -4, -4, -8, 0, 10, -13, 8, -4, 2, 9, -12, 14, 4, 2, -22, 1, -3, 7, 10, 1, -3, -20, -3, -1, -25, 3, -3, -9, 5, -19, -7, -10, -9, 1, 14, 2, 6, 
  -2, -10, 7, -5, -12, 2, 3, 18, -29, 23, 2, -3, 9, 4, -19, 5, -13, -20, 1, -2, -4, -3, -18, 6, 4, 12, -1, 4, 6, -9, -10, 5, 3, 15, 5, -8, -6, 5, 1, 3, -14, 6, -1, -9, -1, -6, -9, 2, -40, 1, 2, 2, 13, 1, -29, -6, -10, 17, 7, -17, 8, 11, -9, 2, 10, 0, -2, 9, -5, 3, 6, 10, -12, -1, 1, -1, -9, -1, -17, -5, -12, -5, 5, -14, 9, 0, -15, 4, -1, -11, 4, -7, 9, 12, -3, 1, -3, -6, 3, 18, -13, 1, -5, -1, 0, 8, 5, -6, -9, 1, -13, -3, 1, 4, -2, -15, -2, 1, -4, -13, -5, -7, 10, -8, 12, -10, -4, 3, 8, 27, 8, 10, -2, -2, 3, -6, 1, -7, -5, 3, -3, 3, -15, -9, -24, -4, -3, 17, 3, -1, -21, -1, 2, -2, 7, -14, 6, 7, -11, -4, 0, 14, -2, -13, -12, 3, 1, -10, -9, 15, 5, -1, -5, -2, -10, -7, -21, -6, 0, 7, -10, 1, -34, -1, -3, 17, 0, -11, -5, 6, 3, 1, 9, 9, -4, 1, -14, 0, -2, 17, -14, -3, 1, -12, -6, -3, -28, 2, -16, -14, -4, 21, -14, 4, -22, 2, -15, -9, -8, -17, -5, 0, -4, -4, 4, 14, 0, 2, 4, 6, 2, -5, -24, -13, -5, -5, -9, 3, -18, -4, -19, -12, -4, -3, -12, -2, -18, -5, -4, 23, 18, -11, 2, -15, 6, -4, -2, 6, 4, -18, -5, 7, -2, -3, -16, 3, 2, 0, -3, 2, -10, -7, -10, -5, 4, 13, -6, 3, -17, -3, 2, -1, 10, -10, -7, -12, 4, -5, -16, 2, 1, -6, -10, 1, 2, 15, -5, 1, 3, -4, 1, 2, -12, 2, -6, -15, -7, 2, -3, -6, -14, 5, -4, 24, -3, 6, -2, 8, -1, 1, 0, -12, -3, 17, -14, 3, 2, -1, -10, -7, -1, -6, -7, -4, -13, -9, -10, -8, 1, 22, -8, 5, -28, 11, 1, 16, -17, -15, 12, 4, -3, -3, -3, 2, 5, 3, -1, -7, 5, -8, -11, -2, -2, -9, 0, 5, -11, -5, -11, -13, -2, 2, -3, -3, -13, 1, -6, 18, -18, -18, 6, 9, -4, -2, -6, -1, -7, 3, -7, -4, -3, -1, -29, 24, 5, 0, 0, -3, -9, -7, -28, -18, -3, 40, -6, -3, -30, 3, 1, -6, -9, -18, -5, -9, 1, -2, 
  -2, 2, 1, -2, -3, -7, -4, 2, -6, -3, -6, 1, -5, -5, -8, -5, -3, -1, 1, -5, -7, -4, -4, -5, -18, -4, -6, -7, 0, 8, -3, -4, -6, -10, -4, 0, -7, -1, -1, 0, -1, -1, 1, -10, 2, -6, -6, -5, -4, -1, -6, -1, -12, 3, -14, 4, -7, 1, 4, -2, -7, -7, -4, -3, -2, -1, -3, 1, -7, -6, 3, 2, -7, -11, -6, -3, -1, -8, -8, 0, 2, -3, -2, 0, -16, -3, -7, 2, -3, 2, -7, -3, 0, -8, -1, -1, -4, -2, -3, -5, -5, -5, -4, -7, -5, -1, -2, -4, -8, -3, 1, 1, 0, 1, 0, 1, -6, -2, 1, 2, -3, 2, -5, 3, -2, -15, -6, -2, -12, -7, -3, -1, -3, 2, 5, 2, 3, -12, 0, -4, -12, 1, -7, -2, -1, 3, -4, 2, -14, -1, -8, -5, 2, -6, -4, -1, 0, -7, -1, -8, -7, -7, 1, 0, -5, -2, 0, -5, -3, -4, -5, -1, -3, -7, 2, -4, 3, 0, -5, -4, -9, -4, -8, 4, -3, -6, -1, -3, -2, -11, -6, 0, -7, -5, 1, -3, 1, 1, -6, 3, -7, -12, 3, 0, 9, 4, -1, -2, 2, -5, -6, 1, 0, -5, -6, -6, -7, -2, 4, -2, -3, -3, -2, -5, -4, -4, -3, -5, -1, 0, 0, -4, -4, -13, 1, 0, -11, -7, 0, 4, -4, 0, 3, 4, -2, 1, -2, 1, -4, -2, 0, 0, -2, -6, -5, -3, -7, 2, 1, -2, -4, -7, 1, -3, 4, -10, -1, -1, -1, -5, -8, -6, 2, -6, -2, -1, -5, -7, -3, -1, 1, -4, -7, -1, 0, -14, 2, -1, -5, -3, 1, -5, -3, 1, -5, 0, -1, -14, -5, -5, 0, 1, -9, -5, -5, -2, -1, -5, -8, -3, -5, 2, -5, -6, 0, 3, -4, -7, 5, -2, -8, -3, -5, 1, 2, -5, -5, 1, 1, 6, -6, -2, -13, 2, -6, 4, 3, -5, 2, -5, -12, -4, -3, 1, -7, -3, -4, 3, 0, -13, -5, -4, 2, -4, -6, 0, -2, 3, -4, -5, 0, -14, 1, 2, 2, -1, -5, -5, 3, 3, -6, 3, -10, -7, -6, -3, -8, -1, 3, -2, -1, -9, 3, -3, 1, 6, -5, 2, 3, -7, 4, -5, -9, -9, -7, -3, -1, -3, -8, 5, 0, 1, 0, -11, -5, 2, -5, -5, -11, -4, 0, 4, -5, 3, -1, -6, 
  10, 1, -1, -4, -7, -3, -2, 16, -16, 12, -4, -13, 8, -4, -7, -3, -18, -26, 0, -18, -9, 2, -20, -3, -12, 1, -16, -14, 11, 1, -5, -7, 9, -5, 2, -10, -9, -8, 0, -2, -19, -8, -6, -2, 2, 5, -1, 1, -26, -10, 0, -6, -4, -3, -23, -3, -18, 5, -6, -28, -2, 3, 4, -5, -2, 0, 4, 5, -1, 8, 7, 17, -10, 8, 4, 1, 5, 2, 3, 5, -14, -3, -4, -18, 8, -4, -14, 7, -3, -5, -3, -15, -2, 6, 4, 6, -6, -1, 3, -5, -3, 6, -5, -1, -8, -3, 5, 3, -4, 4, 4, 1, -8, -5, 0, -4, 1, -5, -19, 0, 1, 1, -10, -29, 3, -15, 0, 2, 1, -4, 3, 17, -9, -5, -5, -5, 1, -15, 2, -2, -1, 4, -15, 3, 3, 1, 2, 22, 3, -4, -12, 0, -2, 3, -9, -8, -4, -2, 2, -5, 1, 4, -2, 14, -9, 0, -5, 1, -4, 1, -6, -2, 2, -2, 2, -2, -14, -6, 1, -8, -5, -1, -3, -1, 1, 4, 4, -6, 1, 0, -2, -6, -6, 4, 5, 28, -7, -4, 5, 7, -15, 1, -4, -3, 1, -2, -12, -1, -9, -8, -4, 1, -10, -7, -17, 0, 4, -1, 3, -12, -5, 4, 4, 3, -2, 0, 2, 4, -10, -6, -2, 12, 1, -1, 3, -1, -4, -4, -15, -4, -7, -6, -6, -6, -13, -4, -4, 2, 3, 4, -12, -5, 1, -4, 0, 3, -4, -9, 3, 7, -8, 2, -2, -7, -8, -1, -2, 1, -7, -3, 5, -2, -15, -9, 2, 0, 0, -4, -10, -6, -3, -1, -2, -7, -8, -4, 6, -2, 4, -11, -3, 7, -4, 2, -2, 9, -2, 5, -1, 2, 3, -3, -14, 0, -12, -3, -1, -5, 0, -8, -2, 6, 3, 1, 6, -3, -6, 10, -4, 10, -6, 5, -2, 24, 3, -1, -5, 17, -5, -3, -2, 0, 1, -4, 3, 0, -10, -12, -5, -1, -2, 2, -6, 1, 3, -1, 4, -19, -2, -3, -4, -9, -5, 5, 5, 12, -9, -1, -2, 3, -21, -6, 4, -5, -9, 4, -4, -3, -23, -4, -6, 10, -3, -3, -15, 4, -5, 1, 1, -17, 3, -7, -5, 2, 7, -7, -2, -3, -2, 0, 0, 31, -14, -2, -3, -4, -3, 4, -7, 5, -15, -15, 1, -3, -5, 6, -18, 3, 16, 6, -9, -8, 5, -12, -4, 13, 
  -11, -4, 0, -9, -3, 7, 5, 4, 22, 20, -5, 10, -12, 1, -3, -1, 31, 12, 0, 24, 18, -11, 22, 9, 14, 5, -1, 33, 8, 7, -17, 14, -4, 0, 1, 6, -15, 1, -9, 8, 33, -22, -2, 2, -9, 13, -9, 12, 6, 9, 5, 12, 3, -1, 19, 7, 1, 10, 13, 6, 10, -7, 5, 12, -8, -7, -9, -4, -8, 8, -6, -1, 24, -16, 4, 16, 1, 2, -17, 22, 4, 18, -8, 9, -10, 4, -1, 0, 10, 4, -20, 37, -19, -8, -10, 8, -3, -6, 5, 4, 0, -8, 1, -3, 15, -8, 1, 10, -3, 9, -3, 20, 32, 25, 5, 17, -20, -3, 41, 8, 22, 4, -8, 22, 7, -14, 0, 8, 0, -20, -10, -17, 8, -14, 4, -8, 13, -21, -4, -2, 11, 1, 10, 0, 22, 15, 4, 14, -10, 9, 15, -13, 3, -16, 7, 18, -13, -18, -11, 6, 9, -11, -10, -5, -2, 5, 1, -7, 28, -17, -2, 0, 3, 9, -9, -9, 13, 8, 4, 8, -13, -8, 22, -30, 3, -10, 7, 23, -12, -5, -16, -3, 12, 11, 8, 1, 1, -2, 1, -4, 4, 1, -3, -6, -1, -10, 6, -2, 7, 1, 3, 5, 14, -8, 23, 2, 4, 16, -8, 22, -13, -3, 6, 4, 0, -3, -8, 18, 4, 0, -10, -5, 23, -6, 0, 14, -6, -3, -9, -3, 20, 30, 7, 11, 6, 5, 4, 2, 4, -3, 3, 23, 4, -11, 7, 6, -7, -4, -2, 11, 6, -6, -17, 11, 13, -4, -6, 0, 3, 4, -3, 2, 1, 16, -2, -16, 6, 9, 3, 12, -17, 14, 9, 0, -2, 7, -1, -1, -5, -13, -5, -4, -1, 2, -8, -13, -6, 1, 1, 12, -6, -4, -5, 19, -3, 1, 3, 5, -6, -1, 2, 10, 4, -10, -8, 1, -16, 0, -6, -11, 10, -27, -9, 14, -12, -10, 2, -15, 10, -14, 6, 8, -1, -18, -6, 15, -5, 8, 4, -1, -7, -16, 6, 5, 3, 8, 0, 15, -15, -13, 0, 19, -9, -25, 4, -4, -8, 0, -1, -13, 13, -14, 2, 10, 1, 1, -21, -1, 11, 18, 5, -23, -21, -6, 28, 8, 3, 10, -4, 6, -26, -11, -14, -6, -16, -15, -2, -14, 2, -3, -12, 12, 12, -7, -8, -3, 4, 4, -7, -1, 3, -6, -7, -32, 4, -5, 0, 4, -1, -7, -20, -9, -5, 7, 0, -3, 
  -8, 5, 11, -5, -3, -6, 1, 6, -33, -3, 7, -19, 4, -6, 4, 0, -40, -27, -6, -27, 3, 7, -21, 5, -39, -6, -1, -15, -2, 9, 5, -5, -19, -17, 23, 13, 7, -5, 17, -2, -35, 0, 2, -28, -5, -8, 10, -3, -38, -32, 2, -5, -21, 9, -34, 6, -39, 14, 4, -29, -8, -7, -11, -5, -1, -10, 23, 21, 6, 6, 9, -1, -13, -11, 10, -27, -9, 5, 7, 34, -5, -18, 4, 7, 8, 7, -18, 2, -10, 4, 15, -6, -11, -11, -1, -3, -14, -21, 16, 11, 1, -7, -1, -5, -30, -13, 8, -7, -7, -1, 5, 10, -13, -21, 1, 9, -3, 8, 0, 0, -11, 8, 3, -25, -12, -7, -3, -2, -5, -3, 28, 1, -4, -2, 7, -5, 8, -18, 4, -11, -7, 0, 9, 7, -12, -26, -3, -12, -7, 4, -11, -3, 8, 3, 5, -2, -11, -2, 15, -4, 2, -3, 9, 0, 4, -7, 0, -2, -26, 3, 3, -27, -17, -2, 0, 1, -35, -24, 4, -13, 3, 10, -55, 8, -22, -3, -4, -38, -4, 14, -2, -6, 9, -3, 16, 12, -9, -19, 12, -7, -17, 4, 5, -22, -3, -2, -5, 4, -26, -8, -3, -5, -7, 5, -28, -2, -15, 16, 8, -26, -16, 12, 11, 3, 11, -2, 6, -6, 13, -15, 1, -12, -1, -1, 27, -9, -6, 2, -10, 4, -13, -9, -1, -17, 3, 3, -7, -6, 9, 23, 8, 16, 11, 9, 4, -2, 17, -16, 16, 6, 2, 3, 41, -6, -28, 8, 10, -15, 2, -1, 1, 27, -19, -21, 2, -18, -3, -3, -21, 9, -2, -23, -13, -3, -5, -1, 7, -7, -12, 9, 6, 1, -4, 19, 2, 7, -30, 0, 2, -2, -5, 3, 12, 11, -16, -23, 6, -8, 6, 3, -25, 6, -29, 12, -2, -22, -5, 11, 2, 1, -6, -1, 18, 21, 17, -3, 29, -1, -38, 4, 21, -34, 4, -4, 4, 17, -44, -41, 4, -6, 16, -1, -49, 8, -26, -10, -5, -31, 3, -1, 9, -3, 1, -2, 30, -2, 3, 2, 16, 0, -47, -2, 4, -24, -9, 3, 13, 9, -26, -23, 0, -7, -10, -3, -42, 19, -9, 1, 5, -33, -7, -4, 1, 3, -30, 27, 27, 16, 18, 9, 5, 9, -38, 1, 8, 4, 2, 3, 14, 30, -17, -32, 1, 16, 19, 17, -31, 27, 9, 23, 9, -24, 13, -2, 7, 8, 
  -1, -4, 11, 9, -6, 0, -3, -2, 4, 7, -4, 3, -6, -4, 2, -5, 1, -1, -6, -14, 2, -4, 10, 11, 14, 3, 12, 0, 14, 0, 5, 1, 11, -7, 0, 21, 1, 1, -3, 9, 28, -11, 1, -2, 1, -3, -6, 14, -9, -5, 8, -13, 16, -4, 1, 5, 2, 14, 2, 8, 8, -6, 8, 2, 9, 13, 4, -4, -6, -4, 2, 3, -11, -8, 0, 3, 1, -11, -6, -1, -16, -8, -4, -13, -5, 2, -11, 1, -11, 8, -2, -13, -16, -2, -2, -16, 8, 1, 5, -5, -20, 6, -2, 4, -11, -19, -1, -16, 5, 2, 2, 14, -17, -6, -7, -11, -15, -1, -12, -17, 1, 3, -12, -21, 14, -1, -2, -5, -7, 6, -6, -8, -6, -9, 4, 2, -6, -4, -11, 0, 0, 1, 2, -8, -13, 4, -13, -21, 0, -11, -13, -7, -10, 0, 5, -20, 6, 6, 1, -2, -5, -1, -8, 11, 3, 4, -2, -11, 7, -8, -7, -4, 8, -2, 1, -4, -7, -1, -7, -12, -19, -2, -5, -17, -6, -8, 1, 1, 7, 1, -2, -5, -5, -5, 2, -14, -1, -8, 9, -5, -11, -15, -5, 7, 12, 1, -3, 4, -16, 0, 3, -10, -22, 9, 2, -7, -5, -20, 6, 2, -14, 2, 10, 4, -8, -6, -6, -11, 6, -7, -3, 0, 8, -19, -2, 7, -2, 4, 1, 1, -18, 19, 4, -2, -23, 5, -7, 4, -1, -10, 4, 12, -10, -2, 11, -4, -7, 1, -2, -1, -11, -8, -11, 0, 12, -30, 3, 4, -5, -5, 13, -3, 11, 26, -6, 11, -6, 2, 3, 2, 26, -12, 8, 4, -8, 3, 2, -3, -14, -10, -3, 5, -14, -4, -1, 1, 18, -33, -5, 13, 7, -5, -3, -2, 15, 28, 1, 4, -25, 0, 6, 4, 7, 9, 0, -5, -16, -22, -2, -7, -29, -21, -5, 1, -3, -12, 16, -7, 3, -22, 4, 8, -1, -1, -13, 4, 6, 10, -11, -13, -25, 1, -3, -4, -2, 0, -1, 10, -14, -35, -1, 0, -27, -8, -3, 2, -4, -8, 5, -16, -4, -14, 3, -3, -2, 8, -8, -9, -5, 12, -12, -7, -14, -2, 6, -9, 2, 11, 9, -1, -4, -5, 4, -2, -7, -20, -1, -9, 3, -2, 0, 5, -7, -2, 3, -6, 3, 2, -6, 2, -14, -7, -5, -25, -14, 13, -18, -7, -19, -14, 0, 3, -10, 12, 5, -7, 
  -8, 6, -3, 6, -7, 1, -3, 8, -6, -4, 3, -7, 6, -5, -9, 4, -15, -16, -3, -11, -2, -3, -10, 1, -9, -1, 4, -13, 2, 0, -2, -2, 0, -4, 1, -4, -8, 0, 1, -2, -4, -7, -6, -1, 0, -3, -4, 3, -10, 0, -2, -6, 6, -1, -6, -2, -5, -1, -4, -6, -5, -6, -6, 3, 3, 0, 2, -2, 2, 0, -4, -2, -1, -6, -4, 6, -3, 2, -11, -2, -2, 1, 4, -9, -2, 0, -3, -3, 2, 1, 1, -1, -5, 0, -2, 4, 1, 1, 4, 3, -4, 7, 3, -1, 1, 1, 2, 2, 4, -2, -7, -1, -9, -3, 0, -10, -3, 0, -16, -5, 2, -1, -3, -17, -3, -5, 4, -2, 2, -4, -4, -1, -10, 1, 2, -1, -8, -8, -9, -2, 5, 3, -11, 1, -3, -1, -3, 6, -4, -4, -12, -3, 3, -6, 2, -11, 1, -11, 5, -5, -7, 1, -4, 2, -6, -8, -2, 2, -5, 0, -4, 5, -4, 0, -7, -5, -3, 2, 3, -7, -1, 1, -6, -1, -2, -5, 0, -2, 2, -6, -4, 2, 2, -4, 1, -8, -9, -8, 2, -3, -1, 5, 0, 5, 3, -2, -6, -1, -7, 0, 0, 1, 0, -2, -6, -2, -3, -4, 0, -12, -2, -3, 1, -6, -9, -2, -5, -7, 0, -3, -1, 3, -9, 2, 2, 1, 3, 3, -10, -6, -1, -1, -4, 13, -8, 0, 1, 1, -4, -4, 5, 1, -3, 0, 2, -8, -4, -5, 2, 7, 2, 2, 0, -2, -2, 1, 0, 4, 2, -2, -5, 0, -5, -5, -4, -1, 3, 0, -6, 3, -6, -1, -1, 0, -10, -18, -5, -8, -6, -1, 4, -8, 2, -2, 3, 9, 5, -5, 6, 2, -3, 1, -9, 1, -2, 1, 2, -5, -4, -4, 6, 7, 7, 2, 5, -11, 1, -9, 3, 10, -2, -6, 2, -2, -2, -6, 3, -6, -8, 5, 5, 1, 3, -4, 1, 5, -9, -2, -2, 4, -9, -4, -13, 1, 1, 0, 4, -16, -1, -13, -3, 1, -2, -7, 4, -7, -2, -4, 1, 5, -14, -12, -2, -7, 2, 4, 6, 3, -13, 0, -6, -5, -13, -2, -3, 4, -8, 4, -5, -14, 1, 1, -6, 4, -1, -11, 4, 3, 1, -5, 1, -6, -12, 2, 2, -2, 1, 3, 1, 1, -15, -17, -7, -6, -6, -4, -15, 7, -2, 8, 0, -3, 2, -7, 5, -9, 
  8, -20, 2, -8, -12, -5, -7, 0, 16, -47, 0, 7, -3, 1, -10, 4, 20, 20, -1, 17, -4, 7, 28, -1, 25, 13, -16, 31, -7, -29, 4, -2, -5, -31, 3, -4, -6, -6, -1, -5, 23, -15, -6, -3, -5, -1, -8, 8, 18, 2, 3, 14, -9, 18, 23, 10, 14, -9, -8, 9, -20, -8, 0, 2, -4, -28, 8, 10, 11, -7, -8, -3, 14, -15, -4, -7, 0, 1, -5, 21, 4, 13, -6, -2, -12, 20, 15, 1, -31, -6, -14, 7, -13, -12, 3, 0, -5, -13, 1, -6, -13, -3, -9, -5, 19, -20, 3, -3, -1, -8, -5, 1, 24, 25, -1, -8, -11, 7, 27, 5, -10, -8, -7, 19, 3, 5, -1, -5, 2, 3, 0, 3, -7, -3, -7, 0, 0, -12, -2, -2, -3, -2, -15, -5, 13, 16, 0, -17, 3, 8, -1, -4, -5, -18, -17, 24, 4, -2, -4, -4, 5, -19, -7, 1, -24, 9, 2, 19, 22, -22, -2, -5, -1, -2, 1, 7, -3, -15, -4, -20, -10, 13, 34, 4, -27, -31, -18, 19, -4, -3, 2, 1, -26, -15, -7, 26, -9, 1, -4, -5, 7, 10, -7, -10, 1, 6, 7, -9, -9, 1, -3, -9, -13, 20, -6, -3, -34, -11, -10, -18, -17, 12, 0, 0, -12, -28, -12, 23, -5, -14, -7, -6, -9, -9, -6, -4, 0, 3, 1, 6, -20, 16, 1, 21, -24, 6, 1, -1, -22, -11, -19, -4, -27, -20, 1, -7, -12, -27, -3, -12, -6, -7, -7, 3, -2, -45, 0, -4, -1, -2, -5, 1, -19, -2, 2, 5, -5, 11, 5, -11, -33, -25, 2, -27, -11, 4, 3, 2, -11, -25, 0, 3, -12, -6, -1, -3, -20, 22, 0, 0, 4, 1, 9, 5, 4, -10, 1, -2, -3, 22, -8, -12, -3, -12, -10, -6, -14, 11, -4, -8, -10, -14, -5, 26, 1, -12, 2, -1, -7, -9, 2, 2, 1, -1, -1, -6, -18, -11, -5, -7, 3, 7, -18, -4, -5, 2, -10, -9, -10, 8, -6, 1, -8, -13, -5, 11, -8, -10, -6, -5, 1, -3, -3, -7, 7, 0, -15, -1, -12, -15, -6, -8, 11, 4, -13, 1, -7, 4, -17, -13, -9, -14, -9, -5, -3, 0, -3, 0, -13, 7, -1, 6, -21, -8, -1, 0, 12, -1, -12, 7, -6, -5, 0, -9, -21, 18, -35, -2, -5, -46, -23, -11, 2, -6, -6, -8, 
  1, -7, -2, 2, 7, -8, 3, 12, -6, -25, 6, -13, 7, -3, 12, -1, -4, -11, -11, 8, -13, -5, -14, -2, 7, -7, -9, -1, -9, -11, 3, -9, -10, -5, 2, -3, 10, -3, 36, 1, -31, -3, -2, -13, 6, 0, 5, -10, -14, -23, -10, -10, -10, -2, -38, -5, -12, -14, -6, -12, -9, -6, -2, 4, -16, 0, -5, -8, -3, -8, 19, -5, -18, -14, -10, -19, -11, 6, -2, 3, -21, -22, 3, -11, -19, -3, -18, 2, -9, -1, -13, -15, -3, -10, -4, 6, -12, 1, -3, 3, 7, -4, 12, -5, -30, -13, -4, -5, -2, 4, -10, 4, -8, -11, -1, -7, -2, -1, -11, -13, -11, -8, -7, -14, -9, 0, 2, 10, -5, -14, -1, -5, 1, -5, 9, -5, -17, -14, -3, -25, 5, 2, -2, -1, -12, -37, 3, 27, 2, 0, -18, -8, -4, -6, -8, -6, -10, -7, 0, 15, -20, 3, 0, 4, 13, -3, 23, -7, -2, -15, -4, 1, -1, -5, 3, 3, -8, -14, -7, 0, -7, -3, -22, 11, -3, -11, -5, -9, -4, -11, 1, 7, -12, -1, -2, 6, -4, -10, 28, -3, -7, -18, 10, -6, -1, 6, -7, -4, -8, -5, 2, -1, -4, -9, -8, -4, 4, -6, -9, -3, -17, -17, 12, 13, -19, 2, -9, -7, 7, -2, 18, -7, -20, -9, 21, -24, 12, 6, 2, -3, -21, -22, -3, 0, -1, -2, -20, -2, -10, -15, 4, -22, -12, -9, 0, 8, -2, -1, 1, 27, 3, -3, 45, -6, -22, -9, -9, -11, 4, 0, 3, 3, -18, -17, 3, 6, -7, 5, -16, -13, -19, 0, 0, -12, -2, 7, -3, 8, 3, 0, -8, 12, -3, -7, 38, 7, -20, -12, -11, -18, 2, 7, 1, 4, -24, -21, 3, -3, 0, -3, -11, 11, -7, -10, -8, -17, -3, -7, 0, 5, -3, -8, 0, -3, 3, -7, 19, -3, -18, -4, -3, -17, 14, 3, 4, 5, -22, -13, 0, 19, 3, 3, -25, -2, -23, -5, -4, -22, -3, -15, 0, -4, -8, 1, 2, -9, 5, -3, 19, -11, -26, -9, 3, -18, 0, 1, 1, -10, -31, -12, -3, -8, -15, -9, -22, -2, -2, -5, -19, -21, -4, -5, -5, 0, -6, 1, -9, 9, 3, -3, 16, 5, -21, -3, 2, -9, 9, 0, 12, 3, -38, -24, 0, 4, -3, 1, -12, 13, -8, 1, 1, -21, 15, 2, -3, 8, 
  -9, -6, 1, -1, -17, -1, -8, 22, -22, -22, 3, -7, 4, -5, -4, -4, -15, -18, 5, 6, -3, 1, -26, -2, -14, -5, 4, -10, 0, -6, 4, 1, -10, -5, 9, -5, -13, -9, -3, 7, -15, -12, -8, -9, -5, -2, 1, -4, -5, -9, 0, -4, 6, 5, -13, -3, -9, -9, 0, -9, -1, -17, -5, 2, 8, -5, -3, -2, 0, 2, -4, -6, 3, 14, 3, -2, 1, 3, 3, 4, -9, -6, -4, -8, 11, -5, 1, 9, 0, -4, -5, -6, 3, 3, -1, 2, -7, -6, 3, 8, -5, 3, -6, -2, -6, -7, -4, -5, -8, 2, -9, 3, -11, 4, 1, 8, 10, 4, -7, -1, -5, 3, -3, -14, 0, -10, 1, 5, -13, -4, -1, -10, -8, 2, -4, 6, -13, -10, -4, 5, 1, 1, -2, -5, -8, -2, 0, 17, -9, 7, -22, 8, -3, -2, -4, -15, -4, 2, 0, 4, -8, -14, 3, 10, -8, 4, -2, -15, -15, -13, -6, -4, -2, 1, -13, 1, 0, -8, 2, -3, -11, -1, 8, 1, -2, -6, -3, 3, 0, -1, -1, 3, -8, -8, 7, -2, -17, -9, -7, 14, -8, -21, 1, -11, 3, 3, 4, -2, -7, 4, 2, -8, -16, -5, -2, 1, 1, -1, 2, -6, -6, -8, 2, -5, -9, -6, -1, -4, 1, 1, -7, -9, -6, -17, 5, -9, -3, 1, -12, -1, 5, -1, 0, -1, -9, -1, 0, 2, -6, -3, -1, 2, 6, -6, 4, 5, -7, -16, 2, -7, -10, -8, 4, 2, -18, -8, -8, -9, -2, -1, -7, 2, -8, -5, -4, 4, -12, -3, -11, 6, -15, 1, 1, -10, -4, -9, 0, -6, -14, -4, -5, -14, -2, 2, -4, 4, -2, -17, -2, -9, -5, 4, -7, 4, -9, -6, 0, -8, 2, -5, 0, 8, 2, 4, -3, -15, -5, -15, 5, 2, -4, -6, -1, -14, -6, -5, -4, 12, -5, 0, 0, -8, -1, -5, 3, -4, -17, -7, -2, -14, 7, 5, 5, 14, -16, 6, -2, -16, -8, -11, 0, -4, -11, -2, -2, 29, -11, 3, -6, 7, -12, 15, 1, 1, 0, 4, 6, 2, -9, -9, 0, -1, 0, 5, -19, 5, -17, -11, -1, -19, -6, -15, 0, -8, -15, -12, 2, 7, 1, 5, 0, 8, -18, -9, -7, -7, -1, -5, -9, 4, -1, -21, 2, 9, -1, -17, -7, 5, -4, -9, -6, -10, 4, -4, 7, 2, 
  -16, -47, -10, -2, -23, -3, -5, 2, 19, 3, 2, -27, -8, -5, -4, 10, -8, 33, -1, -36, -27, 24, 13, 2, -33, -11, -7, -1, -3, -2, 6, -5, -27, -24, -7, 1, 4, -3, -5, 0, 17, -17, -4, -34, 1, -6, -14, 9, 19, 5, 3, 7, 1, 18, 17, 0, -24, -6, -4, 10, -10, -4, -12, -18, -24, -12, -18, 17, 18, -4, 3, 2, 11, -16, 4, -6, 2, -3, -6, 18, 17, 48, -5, -2, -15, 17, 18, -2, -78, 17, -17, 14, -5, -23, 6, -8, -6, -25, -8, -5, 10, -4, 4, 3, 33, 5, 2, -23, 0, 8, 2, 5, 13, 32, -1, 0, -26, 6, 20, 3, -111, 16, -8, 10, -14, -15, -2, -18, -14, -9, -7, -5, 16, -7, -3, -12, 14, -1, -3, -30, -7, 0, -23, 9, 19, 25, -5, 11, -8, 17, 35, 1, 0, 8, -18, 42, 5, 4, -3, -7, -8, -38, 15, 18, 10, 2, -6, -2, 35, -2, 0, -6, -5, -1, -25, 8, -1, 15, -1, 0, 8, -2, 7, -3, -12, -9, 2, 12, -44, -1, -3, -7, -41, -13, -4, 22, -25, 0, 1, -3, 24, -15, -3, -35, 6, -6, -8, -4, -13, 4, 1, 16, -13, 5, 26, 7, -11, -24, -15, 23, -3, -8, -6, -6, -30, -6, 2, -8, -17, -1, 4, 0, 13, -19, -6, -18, 0, -3, -4, -3, 6, 14, 4, 26, -12, 12, 28, -3, -10, -26, 3, 32, 1, 7, 9, -1, -14, -25, 3, 26, 20, -2, -2, 0, 12, -24, -5, -25, -3, 3, -4, 8, -14, 6, 2, 4, -16, 15, 9, -7, -76, 8, -19, 4, 4, 9, -2, -2, 0, -29, -3, -6, 18, 3, -5, 3, -3, -8, -2, -31, 3, 2, -19, 7, 9, 8, 2, 23, 9, 12, -4, -4, -32, -4, -12, 17, 3, -1, -8, -16, 7, -37, 8, 3, -31, -6, -2, -8, 20, -33, 3, -24, 1, -1, -8, 6, -8, 41, 0, -1, -7, 5, 20, 1, -71, -4, 7, 11, -32, -13, 2, -9, -27, -39, -10, -2, -23, -10, 1, -3, 42, -30, -6, -17, 4, -2, -15, -13, 8, 13, -3, 9, 2, 12, 20, 7, -5, 19, -9, 11, -6, -18, -1, -25, -61, -31, 4, -11, -14, -2, 4, -6, 3, -34, 1, -19, 3, -7, -7, 3, 1, 19, -4, -17, -12, 16, 0, -5, 20, -76, -23, 12, -21, -6, 0, -31, 
  -4, 2, -1, 0, -22, -6, -3, 10, -32, -10, 4, -19, 5, -2, -11, 1, -29, -29, -4, 0, 3, 0, -25, -3, -29, -9, -8, -15, 9, -7, 6, -4, 2, -6, 2, -3, -18, 1, 0, 0, -14, -3, -3, -6, 4, 1, -4, -5, -3, -14, -5, -4, -2, 0, -17, -7, -8, 0, 3, -8, 4, -16, -1, -2, 2, -11, 2, 3, -11, -3, -2, 4, 3, -4, -2, 8, 0, -1, -8, 1, -8, 0, -5, -6, -2, -8, -18, 5, 9, 3, 3, -8, 5, -13, -1, 4, -13, -14, 7, 5, -1, -2, -10, 0, -3, -10, -3, -1, -1, -2, -14, -2, -1, -3, 0, -7, -3, 5, -16, -7, 0, -9, -6, -14, 3, -17, -3, 1, -18, -13, 9, -2, -2, -11, -6, -15, -10, -6, -6, 2, -2, -3, -8, -1, -5, -11, 2, 10, -3, -1, -10, -10, 7, -13, -1, -4, -14, -12, -4, -5, -16, -7, 5, 2, 9, -7, -4, -5, -19, -4, -3, -5, -1, 4, -12, 2, -7, -15, -7, -6, -10, 6, -11, 5, 2, -6, -4, 0, -4, -14, -1, 0, -19, 1, 4, -6, -20, -6, -10, 13, -11, 0, 3, -3, -8, 4, -6, 6, -3, -4, -7, -2, -12, 3, -10, 11, -4, -2, -8, -4, -6, 0, -3, -7, -8, -5, -3, -3, 2, -10, -4, 0, -10, -6, -2, -2, -4, -3, -18, -9, -10, -5, -10, 3, -3, -1, -8, 4, -15, -11, -2, -11, 13, -15, 8, -1, -15, -8, 0, 2, -15, -5, 6, 10, -6, 4, -8, -1, -6, -1, 2, -3, -13, -8, -1, -6, -3, 8, -14, 0, -13, -2, -13, -10, 2, -19, 7, 5, -9, -12, 7, 4, -7, -4, -6, 13, -4, -3, -6, -6, -3, 5, -22, 7, 1, 5, -3, -5, -3, 2, -4, 9, 11, 3, -2, -7, 2, -8, 2, -3, -1, -3, 4, -1, 6, 7, 0, 7, -7, -2, 0, -15, 1, -3, -10, 1, -15, -14, -2, -1, 8, 2, -11, 0, -5, -2, 8, -11, 3, -8, 5, 0, 1, -5, 4, -10, -9, 5, -4, 12, -27, 3, -4, -13, -5, 1, -4, 2, -7, -25, -5, -5, 16, 2, -22, 2, -16, -4, -2, -15, -1, -11, -10, -7, -14, -6, 6, -8, -10, 4, -1, 2, -22, 7, -1, -14, 3, -5, -8, -1, -9, -19, -1, 10, -2, 0, -27, 4, -3, -2, -5, -18, 7, -3, 6, -2, 
  4, 3, -2, -7, -14, -1, 7, -2, -15, 6, -5, -4, -2, -3, 0, -7, -18, -16, -3, -19, 2, 4, -6, 2, -11, 0, -18, -13, 4, -3, -9, -1, 25, 3, -1, 16, 12, -1, 0, -6, -5, -23, 6, 1, 14, -3, -5, -14, -15, -19, -3, -27, -15, 3, -6, -1, -16, -1, -8, -17, -2, 11, -5, -6, 3, 11, 3, 2, -4, -3, -1, -5, -16, -17, 5, -6, 5, -12, -11, -6, -25, -17, 1, -18, 3, -9, -6, 5, -12, -1, -6, -21, 1, 3, -6, -6, -21, 17, 0, 36, 1, 3, 5, 0, -12, 2, 8, -12, -5, -16, 2, -5, -19, -19, -5, -12, -10, 12, -16, -8, -15, -22, -12, -30, -4, 44, 12, -5, 11, 13, 5, 11, 20, 2, 1, -3, -27, -2, -4, -11, 7, 1, 4, -3, -24, -24, 3, -4, 7, -6, -34, 2, -14, -4, -14, -18, -7, -2, -1, -6, -7, 31, -2, 13, 3, 3, -2, -6, -7, 14, 4, -21, -12, 4, 4, -7, -25, -26, 1, -12, 1, -5, -9, -2, -17, -3, 5, -31, -5, 9, 4, 5, -5, 11, -2, 13, 24, 0, 9, -4, -12, 4, 4, -8, 2, 1, -11, 2, -16, -1, 0, -16, 22, -5, -10, 0, -4, -1, 7, -2, -1, 1, 6, -4, -6, 28, 1, -1, 1, 1, 2, 8, 0, 8, -1, -11, -12, -3, -4, -5, 5, -11, 3, -6, 21, 8, 7, 0, -24, 0, -13, -7, 13, -5, -8, -10, 2, 9, 3, -10, 12, 6, 1, 0, -30, 16, -3, -23, -5, -7, 11, -12, -12, -20, 0, -3, 6, -5, -41, 2, -15, -11, -8, -28, -11, 2, 16, -3, 14, 32, 4, 37, 12, -1, -3, 1, -26, -12, 6, -3, 8, 7, 3, 5, -21, -19, -2, -23, 11, -11, -9, -2, -17, 5, -10, -16, 1, 18, 7, 4, 13, -1, -1, 8, 10, 4, -1, -6, -25, 26, 7, -14, 6, -9, 1, -4, -36, -13, -6, -10, 3, -14, -23, 5, -26, -21, -25, -27, -1, 23, 4, -10, 10, 26, -1, 22, 11, -3, 3, -2, -19, 22, 1, -20, -7, 4, 11, 0, -29, -28, -2, 19, -2, -4, -28, -3, -24, 6, -18, -38, -19, 5, -8, 3, -3, 39, 3, 39, 4, -7, -4, -1, -19, 40, -3, -16, -1, 3, 3, -3, -9, -18, -7, 14, 16, -10, -25, 4, -21, -11, -11, -26, 1, 4, 8, 1, 
  -20, 1, 23, 9, 48, 3, -3, 23, 4, 44, 1, -4, -3, 4, -7, -17, -13, -4, 0, -5, 20, 8, -5, 12, -3, 0, 8, -13, 38, 11, -9, 1, -23, -6, 18, 13, -21, -2, 0, 22, -11, 21, 4, 0, -3, -1, 10, 15, -20, -23, 3, -3, 33, 1, -28, 1, -5, -14, 24, -24, 13, -14, 0, 4, -10, -8, 31, 16, -28, -6, 0, 15, -21, 2, 3, -3, 3, -6, -10, 7, -25, -29, 0, -18, -13, -7, -20, -4, -12, -14, 17, -11, 8, -6, -15, -2, -5, -14, 13, 0, 52, 3, 1, 15, -43, 12, 3, -11, -4, 0, 3, 8, 3, -23, 1, -25, 24, 22, -40, 4, -17, 2, 17, -14, 11, 13, 12, -4, 25, 12, 8, 20, 10, 0, 6, 11, -2, 10, 9, -5, 1, -3, 18, 12, -33, 7, 1, 1, 8, -14, -8, 11, -20, 17, -3, -24, 0, 10, -10, 1, -22, -12, -14, 4, 30, -1, -2, 11, -17, 17, 1, -1, -6, 1, 15, 9, -24, -5, 5, -13, 14, -2, -17, -2, -16, -5, 6, -16, 7, 5, -7, -4, -2, -25, -3, 4, -4, -2, -3, 23, -23, 10, -7, -6, 6, -1, -11, 14, -4, -21, -2, -3, 32, 10, -18, -2, -16, 1, -4, -26, 46, -16, -6, -1, 10, 19, 20, 9, -22, -9, -3, 4, -13, 22, -5, 8, -2, -1, 16, 22, -25, -12, -4, -14, 13, 17, -26, 11, 2, 11, 10, -13, -2, -9, -2, -5, -24, -5, 7, 11, 0, 3, -1, 26, -11, 23, -1, -3, -6, -1, 8, 8, -26, -21, -1, -23, 11, 20, -30, -1, -27, -17, 31, -11, 13, -11, -3, -2, 10, -4, 18, 24, 14, -8, -5, 13, -14, 23, -3, -8, 0, 1, -6, 7, -19, -42, 2, -10, 5, 1, 7, 8, -1, -5, 21, -10, 2, 15, 5, -4, 4, -2, 15, -1, 48, -5, 6, 22, -39, 18, 6, 1, 1, -13, 40, 1, -51, -41, 0, -22, 17, -13, -40, -2, -17, -23, -7, -48, 2, 31, 6, -4, -26, -15, 10, 2, 19, -8, 1, 10, -41, 24, -6, -7, -2, 3, 0, 14, -16, -50, -2, 13, 6, -14, -45, -2, -8, -20, 11, -44, -6, -1, 3, 2, 0, -20, 29, 4, 53, -3, 1, 8, -29, -11, 2, 2, -3, -2, 29, -5, -23, -24, 3, -14, 26, 19, -2, 20, -11, 9, 5, 3, 12, -30, -9, -1, 
  -13, -14, 10, 17, -23, 8, 8, 2, -29, 22, -2, -15, 9, -12, -4, -3, -26, -30, -4, -27, -11, 40, -26, 8, -38, 19, -3, -29, 1, -4, -1, 12, -3, -4, -3, 2, -2, -6, 0, -9, -39, 8, -5, -8, 15, -2, -11, -21, -21, -27, 8, 9, 38, -3, -31, 2, -34, 15, -15, -37, -7, -12, 9, 8, 13, -16, -6, 7, -16, 4, -9, -2, -28, 2, 7, -7, 1, -17, -17, -14, -22, -19, 4, -19, -10, 37, -30, 14, -6, 15, -5, -18, -3, 14, -12, 16, 5, -3, 3, -5, -5, 0, 0, -1, -3, 16, 11, -2, -4, -10, 5, -9, -16, 2, 7, -14, 8, 49, -5, 7, -30, 10, 7, -28, 1, -26, -2, 9, 10, 12, -2, 20, -4, -6, 8, 7, -2, 12, 11, -2, -2, -8, -24, -19, -20, 2, 8, -4, -9, -7, -29, 7, -15, 15, -11, -21, 3, 17, -5, 1, -5, 0, -8, 23, -16, -2, 4, 1, -14, 8, -9, -7, 8, -7, -13, -11, -7, -18, 6, 27, 9, 9, -31, 17, -25, 9, 11, -29, 4, -2, -5, 16, 9, 8, 5, -6, -9, -4, -8, 6, -16, 13, -3, -15, 5, -8, -12, -17, 4, -20, 0, 1, 9, 18, -8, 14, 0, 8, 10, 4, 2, 7, -13, 14, 12, -5, -2, 19, -16, 3, 4, 6, 5, 0, -6, 4, 0, 3, -20, -12, -13, -11, 0, -12, 26, 26, -7, 10, -11, 19, -11, -4, 7, -16, -1, 3, -15, -1, 5, 12, -19, 0, 7, 2, -7, 26, 3, -7, -1, 4, 3, -18, -16, -8, 11, -18, 34, -4, -31, 20, -30, -17, -4, -20, -6, 11, -5, -4, -11, 14, -3, 1, -21, -3, -8, 11, -28, 25, -5, -9, 6, -4, -26, -24, -9, -17, -9, -1, 1, 0, -22, 6, -12, 16, 5, -15, -2, -6, 5, -4, -3, 4, -6, 14, -37, 3, 8, 0, -34, 16, 2, -13, -2, -13, -11, -7, -26, -9, -1, 12, 0, -12, -31, 13, -5, -4, 1, -38, -6, 8, -10, 5, -5, 15, -1, 22, -18, -1, -4, 5, -24, 2, 21, -10, 14, -11, -16, -30, -9, -19, 23, -13, 1, 35, -6, 0, -30, -7, -7, -21, 7, -10, -5, 12, -14, -12, -4, 8, -31, 4, -1, -3, -16, 34, 0, -1, 0, -14, -11, -31, -11, -18, 0, 26, -9, 24, -26, -2, -7, -17, -23, -24, 12, -9, -2, -5, 
  -6, 1, -2, 0, -4, -3, -2, 9, -22, -8, 9, -11, 4, -1, 1, -5, -7, -22, -7, 0, 3, 10, -15, 1, -12, 4, 2, -6, 4, -1, -5, 4, -4, 3, 3, -6, -6, 4, 0, -7, -10, -3, 2, -1, 2, -3, -2, 5, -4, -2, -4, 6, -1, -2, -7, -5, -3, -4, 0, -3, 3, -2, -1, -1, 8, -4, -6, 1, -1, 6, -6, 6, 0, -3, 0, 0, 1, -3, -5, -2, -1, -6, 0, -4, 7, -2, -13, 6, 1, 4, -3, -5, 7, -4, -4, -1, -3, -5, -1, 2, 6, -3, -4, -1, -10, -5, -2, -6, -5, 5, -6, -2, -5, -6, -1, -11, -4, 3, -11, -6, -8, -2, 3, -12, 7, -7, 0, 12, -8, -3, 4, 1, -5, 0, 1, -2, -1, -6, 2, -1, 0, 5, -4, -3, -3, -15, 3, 1, -11, 6, -12, 2, -8, 2, -8, -2, -4, -4, 0, 0, 0, -3, 5, -3, -4, 0, -9, 2, -14, -9, -5, 0, -4, 5, -3, 1, -7, -6, -4, 0, -5, -5, -18, -1, -8, -7, -1, -5, 0, -14, -1, 11, -1, 2, -1, 3, -17, -4, -7, 6, -13, 3, 4, -8, -2, 4, -6, -2, -8, -2, -4, -1, -7, -1, -11, -2, -8, -5, 2, -6, -9, -2, -6, 4, 4, -4, 3, -2, -1, -3, -5, -1, -15, -10, 8, -5, 4, 5, 0, -2, -4, -7, 3, 4, -5, -4, -6, -1, -11, -4, 4, -11, -3, -12, 10, 0, 8, -6, 5, 1, -5, 11, 4, -4, 1, -1, -1, -5, -7, 3, 4, 3, -6, -1, -1, 2, -7, 1, -13, -5, -13, -1, -8, -4, -1, -1, 6, 3, 3, -8, -2, 4, 1, 0, -5, 3, -6, -2, -5, -9, -4, 8, -6, 5, -2, -3, -5, 1, -5, 3, -4, 4, -1, 1, 0, 0, -5, 13, -2, 2, -8, 0, -6, -2, -2, 1, -1, 5, -18, 9, -2, -14, 6, 3, 0, 2, -10, -11, -2, -3, -7, -6, -18, 14, -16, 2, 3, -4, -7, -5, -1, 3, 3, 1, -1, -2, -14, -5, -9, -6, -26, -2, -4, -20, 0, 0, -7, 2, -5, -22, 3, -3, 7, -4, -21, 11, -20, 2, -8, -12, 5, -2, -5, -3, -9, -2, 1, -2, 5, 0, -6, -1, -10, -2, 4, -14, -3, 1, 6, 1, -18, -28, -2, 1, -5, 4, -25, 9, 0, 3, 1, -21, 1, 0, 2, 3, 
  -9, 14, 7, 0, -13, 13, -4, 29, -25, -16, -2, -15, 10, -3, -19, 3, -18, -17, -3, -6, -3, 4, -15, -5, -18, -6, -13, -15, -1, -8, -3, -3, -7, 8, 8, 3, -8, -3, 2, -4, -17, -6, -3, -9, 1, -1, -5, 5, -4, -3, 1, 15, 2, 2, -14, -11, -10, 4, 4, -8, 0, -5, -6, -1, 7, 6, -2, 2, -1, 2, -6, 1, -11, -10, -6, -14, -3, 4, 0, -3, 1, -17, -3, -10, -6, -9, -7, 2, -12, -8, 5, -13, 2, -8, 2, 3, -4, -6, -1, 16, 10, -2, 4, 6, -7, -22, -7, 9, 1, 1, -7, -7, -8, -3, -1, -3, 4, 0, -14, 2, -13, -8, 3, -24, -4, 0, -14, 4, 1, -11, -6, -4, 9, -3, 11, -4, 1, -18, 0, 4, 9, 5, -3, 1, 14, -15, -5, 15, 4, -8, -16, -1, 2, 1, -4, 3, -6, 0, -2, 3, -2, 0, -2, -17, 16, -4, -9, -15, 6, -14, -7, 16, 1, 8, -4, 1, -7, 4, -10, 3, -19, -14, 11, 5, 4, -3, -1, -16, 5, -4, 0, 5, -5, -2, 10, -9, -9, -9, 13, 9, -5, -14, 2, -15, -6, 1, -1, 1, 0, -3, 0, -9, -8, -2, -2, -9, -4, -5, -4, -16, -15, 8, 1, -9, -7, -10, -8, 2, 20, -7, 0, -5, -25, -4, 13, -6, 2, -6, -4, 2, -18, -15, -5, 13, -10, -5, -1, -5, -19, 1, -6, -14, 4, -4, 4, -3, -8, -5, 7, 6, -3, -6, 25, -6, -22, -15, -6, -1, 3, 0, -9, 4, -2, -15, -5, 16, -12, 3, -7, -1, -9, -3, -2, -12, -4, -11, -2, 2, 2, -12, 1, -7, 7, -3, 5, 11, -5, -17, -6, -9, 13, -1, -8, -2, -14, -10, -12, -5, -5, -5, -5, 6, -14, 0, 3, -15, -12, 2, 3, 1, -1, -4, 0, -5, -1, -4, 15, 6, -19, -13, 5, -11, 5, 1, -10, -4, -18, -19, -9, -9, -3, -1, -19, 5, -16, 3, 0, -22, -4, 1, 2, -2, 3, 4, 9, 10, 4, 5, 4, -2, -35, 3, -2, -9, 0, -1, -1, 4, -16, -7, 3, -2, -18, -3, -14, 6, -16, -6, -7, -18, 6, -2, -5, 0, -16, -13, 4, 23, 0, 5, 21, 5, -18, -12, -1, 7, -1, 2, -10, -2, -19, -16, -3, 4, 4, -4, -28, 6, -4, 4, -2, -14, 4, -17, -2, -8, 
  -6, -12, 0, -4, -4, -5, -5, -7, -7, -1, -2, -5, -3, -1, -10, -2, -6, -11, 2, -15, -4, 3, -4, 4, -3, -4, 3, 0, -4, -5, -5, -3, -6, -16, -2, -12, -8, 1, -5, -2, 8, -4, 4, -9, -1, -4, -14, 7, 2, 0, -2, 25, -3, -7, -11, -3, -8, -11, 4, 7, -6, -9, 1, -6, -8, -12, -5, 2, -12, -4, 0, -14, -11, -2, -1, -5, 2, -5, -3, 4, 2, 2, -1, -9, 3, 3, -14, -1, -13, -8, -2, -2, -5, 0, -1, -15, -1, 1, -5, -9, -8, -1, -6, 5, -10, 5, 2, -5, -5, 1, -13, -6, 1, -1, 1, 2, 3, 2, -6, -4, -12, -7, 3, -2, -4, -1, -5, -2, -7, -8, -4, -5, -9, 0, -2, 1, 7, -6, -4, -7, -3, 0, -11, -5, -10, 6, -2, -12, -3, -4, -10, -6, -6, 2, 1, 1, 2, -11, -1, -6, -2, -10, -4, -10, -7, -3, 0, -14, -4, 3, -5, -2, -5, 0, 2, 1, -4, -8, 3, -5, -5, -7, -4, -3, -7, -4, -5, -6, -4, -12, -5, -5, -4, -3, -4, -9, -11, -8, -5, -5, 1, -1, -1, -6, -5, -1, -4, 0, 12, 4, -5, -9, 3, 3, 5, -1, -3, -5, -7, 7, 1, -13, 1, -5, -1, -14, -6, -7, 1, -6, -4, 10, -13, 2, -2, 0, -6, -1, -15, 0, 3, 2, 2, -2, -6, -7, -1, 2, -7, -6, -4, 2, -10, -9, -4, -6, -7, -5, -6, -5, -2, 4, 1, 4, -10, 4, -1, -9, -7, -6, -3, 0, -5, -10, -3, 0, -5, 4, -7, -6, -4, -12, 0, -3, 2, -3, 2, 1, -10, -6, -6, 0, -1, 1, -2, 9, -8, 0, -5, -6, 5, -4, -11, 1, 4, 5, -4, -6, -5, -1, -4, 0, -7, -7, -5, -2, -2, -13, -1, -3, -4, -4, -8, -2, 0, 2, 2, 1, -1, 2, 3, 5, -6, 2, -6, -5, -10, 1, -1, -6, 0, -5, -3, -4, -16, -6, -1, -6, -8, -12, -4, 0, -4, -16, 3, -1, -9, -8, 0, -2, -11, -6, -1, -7, 0, 0, 6, -2, -4, -5, -3, -14, -4, -5, -12, 0, -6, -5, -6, -6, -6, -6, -2, -8, -9, 0, -4, 3, -12, -6, 3, -2, 4, -3, -4, -8, 4, -2, 7, -6, -4, -10, -2, 15, 3, -2, 5, -1, -11, -15, -3, -10, 1, -1, -2, -3, 
  -6, -3, -3, 1, 0, 3, 4, 3, 2, -1, 2, -1, -2, -4, -1, 0, -9, 5, 1, -8, 4, -5, -3, -6, -1, 2, 2, 4, -4, 0, -6, 0, 1, -6, 1, -1, 2, -2, 3, 2, 1, -3, -5, -3, 0, 1, -6, -3, -5, 2, -1, -8, -1, 4, -1, 4, -2, -1, 4, -2, 0, -7, -1, 2, -2, -5, -7, 2, -12, -1, -3, 2, -4, 1, 2, 4, -7, -4, -7, -7, 1, 0, -2, -10, 0, -2, 1, 0, -3, 1, -1, 1, -2, -3, -9, 1, 0, -4, -3, 1, -1, -4, 2, -3, -5, -4, -5, -8, -5, -2, -3, -5, -5, -6, -3, -5, 1, 3, -9, -1, -12, -5, 1, -5, 0, 1, -4, -1, -1, -9, 1, -2, -4, -5, -6, 1, 2, 1, -3, -6, -1, -5, -6, -5, -6, -6, -4, 1, 0, 3, 1, -4, 3, -2, 1, -2, -7, 2, -10, -1, -8, 1, 3, 0, -2, -3, 0, 2, 4, -6, 3, 0, 0, -4, -5, 1, 2, 1, 0, 1, -4, -3, 3, -5, -5, -6, 1, -9, 0, -1, -9, -2, -7, -7, -1, -2, -6, -2, -3, -4, -8, 2, -3, -8, 1, 1, -6, -1, 0, 3, -2, -3, -1, -6, -4, -1, -4, -2, 0, 1, -1, 1, -12, -1, 0, -5, -8, -2, 1, -1, 3, 3, 1, -1, -2, 0, 1, -5, 2, -2, -12, 1, 0, -4, -5, -5, -2, -3, -7, -6, -1, -16, 4, -3, -3, 1, -1, 1, -6, -2, -7, 2, -1, -2, -2, -2, -5, -3, 0, 0, 0, 1, -8, -11, -5, 6, 2, 4, -4, 2, 7, -2, -1, -1, 1, -6, 0, -6, -13, 0, -2, -3, -3, 0, 4, 8, -9, -4, -1, -9, -3, -3, -8, 3, -4, -2, 1, -7, -4, 3, 1, -4, -2, -11, -5, 1, 0, -4, -2, -4, -2, -6, -2, -5, -4, 2, 3, -1, -10, 1, -5, -3, -7, -1, 2, -5, -1, -7, -1, -1, 0, -3, -9, -6, -1, -2, 4, -9, -1, 0, -2, -6, -6, -3, 0, -3, -2, -1, -6, -4, -8, -5, -6, -3, 5, -7, 0, 3, -8, -1, 0, -1, -5, -2, -1, -5, -4, -4, -3, -3, -2, 0, -5, -2, -5, 3, 3, 2, -3, -1, -1, -4, -3, -6, -5, -5, 6, -5, -2, 2, -5, -3, -2, -11, 3, -1, 1, -2, -6, 0, 0, -9, -2, 2, -10, -5, 
  4, -2, 1, 2, -11, -4, 4, -6, 2, -4, -4, -5, -4, 6, -4, 7, 3, 25, 1, -4, -4, -1, 4, -11, 19, 0, -3, 16, 10, -13, -3, 1, 7, 12, 5, -1, -15, 5, -1, 0, -3, -10, 1, 3, -9, 1, -7, -9, -1, 2, 2, -22, 5, -6, 25, -4, -16, -7, -3, 15, -3, -9, -4, 0, -33, -2, 1, 5, -3, -2, 4, -1, -12, 2, -2, -4, 0, -1, -11, -3, -10, 6, 2, -14, -6, -2, 25, -1, -32, -8, -1, 0, -2, -7, -6, -3, -12, -18, -1, 3, -4, -5, 0, -9, -16, 8, -1, -5, -4, -4, 6, -5, -14, -6, 3, -28, -8, 0, -18, 1, -51, -15, 2, -13, -8, 0, -4, -4, -22, -17, 3, -6, 0, -4, 3, -7, -15, -12, 4, -11, -3, 0, -1, -12, -12, -6, 4, -15, -2, -1, -36, -6, -48, -12, -3, -18, -8, -12, -4, 3, -9, -14, -1, 5, 2, -10, -1, -8, -14, -5, -2, -12, 3, -6, -1, -10, -10, -6, 5, -16, -2, -10, -13, 4, -29, -7, 1, -4, 2, -3, -6, -2, -2, -6, 2, -2, -7, 3, 1, 9, -16, 5, -2, -9, 9, -3, 0, 10, 1, 2, 1, -9, -7, 9, -8, -3, 12, 5, -4, -2, 1, -5, -5, 1, 4, -3, -2, 1, 19, -9, 5, -3, 2, 3, -5, 2, 1, -3, -7, -2, -8, -11, -3, -11, 0, 2, 6, 3, 10, 1, -2, -2, 10, -2, -2, -3, 13, 4, 7, 4, -8, 1, 0, -6, -6, -2, -2, 0, -4, -6, -1, -6, 17, 10, -6, 7, 2, 4, 17, -3, 13, 6, 4, 13, 6, -2, 4, -6, 13, 4, 5, 3, -22, -4, -4, 2, 5, -4, -3, -1, 3, -6, -11, -4, 4, 10, -1, 14, -6, 6, 12, 2, 7, 24, -1, 11, -20, 0, 1, 1, 1, -12, -10, 4, -7, -5, 5, -2, 15, -2, 3, -5, -8, 6, -7, 3, 5, -5, -5, -3, -4, -5, 13, -6, 22, 13, 5, 5, -4, -3, -6, 2, 16, 14, 7, -1, -22, -7, 1, -2, 6, 4, -7, -11, 2, 1, -12, -15, -15, -3, -5, -5, -4, 2, -1, 1, 23, 15, -2, 5, 10, -6, -6, -3, 3, 2, 3, -1, -12, -3, -1, -3, -3, 3, 1, 4, 8, -6, -7, -4, -10, 6, -6, -30, -1, 7, -3, -5, 8, 1, -2, 5, -7, -5, -2, -2, 
  -4, -16, -1, 9, -5, -5, 8, -13, -21, -7, 16, -20, 18, -8, 4, -6, -21, -23, 3, -49, 46, 18, -16, 1, -21, -14, -4, -26, 14, 1, -17, -3, -13, 1, 9, 6, -3, 5, 26, 3, -13, 3, 10, -25, 22, -12, -6, -11, -13, -19, -6, -28, 4, 13, -27, 23, -20, -8, -12, -17, 11, -5, -11, 14, 7, -3, 41, 11, 0, 12, 7, 14, -15, 15, 12, 4, 14, -7, 43, -6, 2, -26, 2, 7, 27, -1, -1, 38, -3, -9, 11, 6, -14, -7, 7, -2, -5, -1, -12, 25, -5, 2, 10, 12, -24, 8, 21, -11, 1, 2, 6, 0, -16, 3, -4, -20, 11, 0, -12, 10, -33, 10, -15, -31, -16, 47, 1, -9, 7, -18, 4, 18, -9, 11, -9, -5, -19, -19, 0, -24, 3, 1, 8, -27, -34, -22, 3, -7, 22, -9, -32, 9, -29, 5, -20, -29, -3, 3, 5, -4, 4, -1, -11, 3, 8, 14, -5, 5, -26, -5, 7, -25, 0, -4, 18, -19, -28, -26, -2, -37, 5, -4, -26, 3, -27, 11, -10, -41, 0, -6, 1, 3, -9, -2, -3, 17, -6, -6, -3, -8, -19, 4, 10, -22, 6, 8, 10, 1, -39, -16, -5, -25, -14, -2, -30, 11, -9, -26, -14, -8, -7, 17, 8, -6, -3, -6, 13, 16, 18, -16, -11, 8, -18, -12, 5, -19, 0, -4, 18, -22, -16, -19, 0, -27, 5, -6, -7, -5, -10, -1, -24, -25, 9, -8, -21, -5, 1, -5, 12, 13, 7, -19, 0, 9, -28, -7, 16, -11, 19, -13, 33, -22, -1, -4, -3, -12, 4, 6, -9, -1, -9, -12, -15, -11, -1, 17, -6, -6, 20, -4, -11, 41, 11, -7, 6, -4, 11, 20, 2, -7, 8, -2, 8, -18, -34, -6, -1, -24, 23, -11, -3, 9, -22, 2, -1, -22, -21, 13, 4, -5, 5, 6, 3, -5, 10, 21, 11, 7, -32, 7, 13, -24, -5, 5, 4, -29, -12, -24, -4, -11, 20, -11, -28, -9, -15, 14, -17, -22, -4, 7, 17, 4, -17, 1, 9, -1, 12, 9, 11, 7, -21, 0, -6, -14, 8, -1, 9, -6, -26, -9, -1, -6, -3, -6, -20, -1, -3, 7, -5, -41, 14, 13, -9, 15, -5, 24, 10, 32, 28, 26, 2, 2, -13, 20, -5, -16, 0, -6, 7, -3, -26, -10, -3, 7, -2, 3, -26, 33, -11, -10, 3, -21, 26, -2, 1, 16, 
  -32, -4, 43, 29, 16, -1, -5, 7, -14, 42, -1, -17, 3, 4, 10, -12, -2, 18, 0, 26, 32, 18, 8, 11, -32, 50, 16, 6, 32, 15, -7, -3, -22, 16, 39, -2, 19, -6, -7, 11, -40, -4, 0, 1, -7, -7, 46, 6, -37, -30, 6, -9, 7, 12, -31, 8, -16, 5, 15, -36, 28, -16, 2, -1, 11, -7, 44, -13, -6, -4, -1, 14, -37, 0, -5, 2, -6, -8, -3, 6, -6, 0, -3, -6, 29, 13, -23, -12, -11, -5, 9, -12, 37, -10, -12, -2, -37, 30, 26, 29, -2, 3, -3, 15, -9, 10, 5, -6, -3, -5, 45, 1, -18, -11, -4, -12, 50, 11, -26, -8, -13, 17, 6, -17, 43, -3, -1, 0, -8, 18, 26, 35, 6, 1, -4, 6, -10, 55, 3, -7, 1, 2, 19, 2, -7, -15, -2, -6, 51, 4, -12, 1, -10, 26, -8, -17, 33, -3, -16, 0, -108, 1, 16, 3, 19, 0, -2, 12, -10, -27, 3, -2, -1, -9, 13, 8, -25, -7, -3, -5, 44, 12, -2, 6, 6, 18, 10, -22, 38, -10, -12, 1, -6, -1, 14, 26, 0, 5, -2, 12, -26, 2, 1, -1, 5, -7, -7, -9, -32, -42, 1, 7, -1, 17, -46, 6, -15, 13, 24, -42, 37, -10, -29, 4, -13, 1, 12, -4, -5, -5, 0, 11, -28, 5, -3, -1, -7, -5, 5, 7, -29, -30, 3, -1, 5, 8, -30, 8, -10, 26, 28, -31, 30, 17, -11, -4, -52, 58, 22, 8, -9, 5, 3, 22, -18, 0, 4, 4, -7, -2, -13, 18, -18, -8, 3, -1, 39, 20, -25, -5, 12, 13, 28, -28, 52, 9, -18, 0, -39, -17, 19, 3, -10, 3, 2, 16, -26, -10, 5, 1, -1, -2, 7, -2, -17, -18, -6, -30, 3, 5, -3, -7, 6, 18, 16, -21, 0, 14, -24, 2, -12, 17, 27, 6, 2, -1, 4, 23, -20, 0, -3, 2, -2, -1, 28, -6, -13, -16, -6, -8, -17, 1, -19, -4, -19, -20, 8, -15, 15, 11, 2, -2, -43, -9, 19, 39, 19, 10, 2, 14, -5, 37, 0, -2, 7, -5, -2, -2, -23, -9, -4, 1, 30, 5, -7, 25, -12, 4, 14, -3, -19, -1, -1, -2, -13, 5, 39, 4, 38, -1, 5, 5, -11, -6, 4, -10, -3, 0, 4, -34, -7, -21, -1, 19, 9, 15, 5, 21, -19, -1, 15, -18, -2, -38, -5, -5, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 64,416 } };
const TfArray<1, float> quant11_scale = { 1, { 0.02062651701271534, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[32] = { -2530, -3297, -1586, -4499, -2241, -2367, -1469, -3157, 822, -3607, -4280, -250, -2398, -3052, -1360, -1176, 623, 605, -2196, -82, -3408, -748, 910, -2228, -101, -2264, -1129, 937, -3816, -2614, -2794, -1569, };
const TfArray<1, int> tensor_dimension12 = { 1, { 32 } };
const TfArray<32, float> quant12_scale = { 32, { 0.00019493715080898255, 0.0001370855316054076, 0.00021538554574362934, 0.00013488283730112016, 0.0001651934435358271, 0.00012571021215990186, 0.00012332054029684514, 0.00011181704758200794, 0.00029171330970712006, 0.00013454988948069513, 7.5095667853020132e-05, 0.00019861791224684566, 9.8569063993636519e-05, 0.00010414273128844798, 0.00023655951372347772, 0.00014100770931690931, 0.00033567458740435541, 0.00027686732937581837, 7.6115786214359105e-05, 0.00023210025392472744, 0.00015826005255803466, 0.00014652768732048571, 0.00031566689722239971, 0.00013155558553989977, 0.00015138156595639884, 0.00020582591241691262, 0.00011779326450778171, 0.00033769727451726794, 0.0001171523763332516, 0.00015718713984824717, 0.00011727902165148407, 0.00014728704991284758, } };
const TfArray<32, int> quant12_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[32*1*3*16] = { 
  /* [0][0][][] */ -15,31,-4,16,39,23,13,-56,27,-15,10,60,17,-54,5,51, -20,19,-28,19,-127,-25,-10,-6,11,-83,95,10,3,-51,20,-15, -2,-5,25,-21,7,-23,-40,32,28,-46,19,69,11,-5,-15,11, 
  /* [1][0][][] */ 43,-53,32,55,-51,68,21,-45,-88,-10,49,105,-59,-33,-25,34, 17,-60,-47,11,-10,-80,46,-4,110,127,29,60,11,-25,-15,21, 13,-73,-20,59,85,-72,-30,-36,-49,-32,37,-9,51,-45,55,29, 
  /* [2][0][][] */ -23,-5,127,-8,-29,-17,-23,20,-10,-40,-13,-41,-1,9,9,12, 13,-42,41,-18,-2,-1,-1,-19,-15,-17,-23,-16,-42,-24,0,-26, 23,0,-42,-19,-19,-32,-17,-17,-5,-11,41,-26,-3,-28,-16,19, 
  /* [3][0][][] */ 17,-62,127,-49,13,-69,21,84,-49,-27,-54,2,-79,38,7,-7, 6,16,-6,-7,-13,31,35,27,25,-23,31,-17,-81,-117,-73,-31, 4,-44,-37,-85,-38,-3,-45,-37,-106,-81,-12,-64,-76,0,-75,-17, 
  /* [4][0][][] */ 51,-54,33,-126,-8,-57,13,-103,33,-29,36,111,56,-112,48,0, 29,-81,-70,-69,-5,-25,-23,-51,-16,-27,-42,55,58,-51,11,3, 5,-85,118,-127,13,-54,-12,-62,53,-13,56,28,30,48,-55,-39, 
  /* [5][0][][] */ -28,-10,-27,-4,-111,-30,25,-31,-44,-39,-82,-23,5,-2,-127,59, 7,-13,11,10,-46,-58,7,12,-1,-70,2,-29,-27,-30,10,1, 24,2,25,-19,-50,-17,-24,18,-30,18,-37,5,0,-25,-33,9, 
  /* [6][0][][] */ 14,-34,-40,-78,64,-25,-58,-5,-65,-74,-60,-57,-93,-61,-71,-43, -39,-29,-65,-3,-36,-9,-81,-11,-45,24,-42,-33,-126,-127,-6,13, 42,-42,4,-52,4,19,22,-18,-65,30,17,-58,15,-25,-47,-24, 
  /* [7][0][][] */ -13,-52,-35,-30,-122,10,-57,1,-64,-2,22,-29,-33,-2,-127,-18, -7,8,-40,-57,-123,-13,-39,-55,10,0,-33,-13,51,-31,-110,-39, 4,-29,9,-7,-19,-28,-73,-56,-14,-8,-38,37,-84,-41,35,21, 
  /* [8][0][][] */ 6,-3,-53,38,-93,-16,-55,7,-74,-47,-122,46,-42,-57,-53,20, -34,-26,-14,31,-68,32,-74,-14,-49,-52,-127,-4,-58,-41,-45,-42, 26,13,-40,5,-97,-79,-54,-15,-28,-5,-78,11,-21,9,-15,-20, 
  /* [9][0][][] */ -21,-82,60,17,48,-105,86,61,107,67,-13,100,47,4,11,23, -29,-103,127,11,45,-46,-80,1,70,-22,115,46,21,5,65,-50, 30,-93,-62,7,-15,-41,50,-33,54,29,61,118,40,5,62,32, 
  /* [10][0][][] */ -76,-27,-93,-67,-12,2,-116,52,56,91,-46,50,17,12,-38,12, 17,-100,-53,-63,-33,-14,-67,13,-101,-74,-127,-54,-61,30,29,1, -102,-10,-47,-28,-103,-28,-71,-14,7,-91,-79,-19,25,-84,-114,-45, 
  /* [11][0][][] */ -35,-41,-99,-7,-54,-53,-78,-15,-37,-65,-71,-25,-51,-27,-70,16, -43,22,-79,-8,-86,12,-49,-57,-13,-33,-127,6,-92,-19,-98,32, -44,-56,-36,-20,-70,-7,-54,-38,-47,-18,-119,-18,-61,-33,-28,-10, 
  /* [12][0][][] */ -49,-16,-3,-24,-13,-4,-95,-84,-42,-45,-23,40,47,-50,-50,-31, -93,-30,30,-60,35,6,-63,-56,-127,-51,0,-85,-94,-14,-33,-21, -37,2,-56,-41,-82,-25,-1,-44,-83,-53,19,27,28,-94,4,-69, 
  /* [13][0][][] */ -73,-78,54,-4,-103,55,-26,34,-54,-78,3,-61,-86,-127,-58,18, -46,-101,1,-12,-68,-47,-13,40,-65,41,-118,-90,-1,-106,-41,-40, -60,-62,40,-78,-65,-6,-54,-55,17,55,-45,70,4,-103,-95,64, 
  /* [14][0][][] */ 7,-51,-10,-56,12,-31,-12,-50,50,1,54,34,3,-53,-38,-26, 12,-27,22,-37,27,-16,-6,-41,18,-28,-15,60,7,-15,14,-17, 2,-47,-14,-127,-24,-66,7,-23,-22,-7,26,24,39,-26,-15,23, 
  /* [15][0][][] */ 5,44,32,-15,-5,7,1,-53,-32,53,53,52,7,-58,2,16, 6,20,127,-84,-64,-22,-2,26,21,-31,56,68,62,-3,32,39, -11,-35,26,-74,38,-27,-89,25,-35,-29,-46,63,-7,-60,-50,28, 
  /* [16][0][][] */ -6,13,18,-38,-56,6,-55,-6,-34,-7,-82,13,-27,-31,-38,-2, -19,3,-12,0,-77,1,-33,3,-38,16,-63,26,-50,-68,-40,-31, 7,22,11,36,-106,12,-22,-2,-63,5,-127,27,-3,-15,-35,-4, 
  /* [17][0][][] */ -25,-9,-54,-7,-91,-51,-60,-15,-25,-30,-90,-12,-61,-19,-63,12, -21,-22,-76,3,-85,-13,-60,-6,-27,-52,-127,6,-29,-60,-75,21, -13,11,-60,35,-93,-71,-56,9,-60,-30,-112,14,-22,-3,-62,-33, 
  /* [18][0][][] */ 29,-12,39,-95,-83,-76,-64,-87,-14,-63,-50,-103,-47,-97,-45,-10, 16,-89,-15,-111,-107,-3,-81,33,-70,-40,-4,-30,-26,58,-127,29, -25,-12,-32,-21,-14,-97,-31,54,3,-49,-11,-34,-68,-100,-46,11, 
  /* [19][0][][] */ -18,-8,9,-73,-62,-31,23,-24,-1,-8,-81,-2,46,21,-15,26, -48,40,-26,-25,-55,29,51,14,-54,-1,-75,-1,-53,-57,-68,7, -48,11,-13,65,-100,13,-80,3,-111,-77,-127,3,-50,-101,-106,14, 
  /* [20][0][][] */ -55,-12,-34,12,-44,-15,-20,-52,-40,6,-58,-4,19,-22,28,8, -5,-45,3,-21,46,-90,20,-21,-127,41,11,-35,-27,18,-112,-7, 18,-12,52,-52,-107,-28,-10,24,8,49,-107,40,67,38,41,28, 
  /* [21][0][][] */ -55,-20,-42,-21,-116,-7,-73,-25,-28,-8,7,-5,-72,-42,-55,-6, -48,-60,12,-59,-17,-59,-25,15,-54,22,18,9,-42,-37,25,-10, -77,-4,127,-50,-45,-46,-79,6,50,27,-58,-43,-42,-43,-103,-2, 
  /* [22][0][][] */ -17,25,-18,42,-61,29,-49,18,-47,-27,-114,23,-16,-59,-61,-6, -21,34,-36,30,-73,26,-73,-27,-66,-18,-103,22,-42,-83,-43,-4, 24,-7,-48,8,-73,-35,-22,15,-54,-21,-127,32,31,10,-7,-33, 
  /* [23][0][][] */ -72,-5,-64,-4,0,-23,-97,-52,62,90,32,19,-51,69,-125,55, -60,-7,12,-58,-43,-33,40,-40,80,-8,26,18,-81,-38,-23,66, -81,-26,37,10,-127,19,-14,-89,-32,-64,38,14,25,-36,-4,28, 
  /* [24][0][][] */ -49,36,-46,-56,-101,33,-42,53,1,0,-52,46,-28,-43,-35,47, -29,76,-114,108,-61,113,-127,-67,-41,0,-33,95,-109,-116,-108,18, -80,79,-75,74,-33,14,-80,-29,-12,-21,-37,97,-26,-56,-42,-32, 
  /* [25][0][][] */ -9,-39,34,4,-49,30,-46,9,-60,-15,-24,12,-26,-47,-84,-30, -2,41,-12,3,48,23,-42,-19,-40,-18,28,-7,29,4,-33,36, -8,8,-9,23,-58,-127,30,2,-45,-60,-44,-53,44,13,18,-3, 
  /* [26][0][][] */ 32,-39,53,-4,-5,-73,-127,-47,-83,-34,51,6,-37,-47,-25,11, -12,-27,58,-67,28,-12,-17,-71,-63,26,-27,-49,-112,-74,-60,-62, 12,-71,39,-64,-89,-99,-48,-29,-96,-41,8,37,42,-94,-77,13, 
  /* [27][0][][] */ -4,43,-25,3,-86,-14,8,-8,-10,-27,-72,-5,-16,-16,-39,15, -9,11,-43,15,-82,38,-32,-3,-39,-32,-127,7,-28,-59,-48,-7, -4,-25,-3,32,-67,28,-61,23,-48,-33,-84,-18,-19,-24,-47,12, 
  /* [28][0][][] */ -16,-77,30,11,-40,-109,-27,56,-40,-59,-24,-10,8,10,-127,23, 27,-17,-32,64,-74,2,-16,-51,14,83,-78,-3,-55,-12,47,11, 28,76,36,78,-114,-77,-40,11,-61,-19,-121,-30,78,-50,67,-20, 
  /* [29][0][][] */ 41,-66,19,-127,7,-58,-12,53,20,-83,55,33,-37,10,-26,-40, -9,-21,26,-37,-20,-39,-63,22,8,-31,52,-20,70,-8,28,-4, -25,-49,-73,7,30,50,-17,-59,36,-104,12,17,-40,-25,13,21, 
  /* [30][0][][] */ 14,-37,-66,-92,-67,-76,-91,-50,4,-27,-56,-41,34,-17,-49,-15, -39,-29,-22,-127,-21,-80,-20,-77,11,-55,-39,0,-88,-19,-52,-10, 4,-7,-43,-49,-13,-7,-69,26,77,-88,119,116,20,7,-7,46, 
  /* [31][0][][] */ -11,66,20,-127,-54,-6,-4,-28,4,-31,3,-55,-28,-8,-37,-43, -36,32,-9,-66,-23,-30,-30,14,-68,-35,32,-46,13,-4,-59,4, 20,-82,5,24,-23,-26,9,38,-54,-40,-3,-18,-7,-51,-63,-19, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant13_scale = { 32, { 0.0065413163974881172, 0.0046000457368791103, 0.0072274832054972649, 0.0045261322520673275, 0.0055432356894016266, 0.0042183352634310722, 0.0041381474584341049, 0.0037521359045058489, 0.0097887404263019562, 0.0045149596408009529, 0.0025199123192578554, 0.006664828397333622, 0.0033075863029807806, 0.0034946163650602102, 0.007937997579574585, 0.0047316588461399078, 0.01126390602439642, 0.0092905675992369652, 0.0025541435461491346, 0.0077883624471724033, 0.0053105787374079227, 0.0049168872646987438, 0.010592527687549591, 0.0044144829735159874, 0.0050797639414668083, 0.0069066998548805714, 0.0039526741020381451, 0.011331778950989246, 0.0039311684668064117, 0.0052745761349797249, 0.0039354180917143822, 0.0049423682503402233, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -5332, -420, -3647, -118, 658, -410, -5465, -3811, -3712, -3952, 573, -2799, -3958, -5929, -3743, -2137, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.9311452282126993e-05, 0.00014054008352104574, 0.00012995913857594132, 0.00016462050552945584, 0.0002581719309091568, 0.00023034312471281737, 0.00013431525439955294, 0.00012450767098926008, 0.00014987871691118926, 0.00012594416330102831, 0.00029424382955767214, 0.00012606027303263545, 0.0001649879413889721, 0.0001073530365829356, 0.00022795025142841041, 0.00011732459824997932, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*3*8] = { 
  /* [0][0][][] */ 12,18,48,64,-42,-13,6,43, -16,2,60,-85,-94,7,70,-127, 6,20,52,-41,-13,-54,48,-90, 
  /* [1][0][][] */ -54,39,-76,-88,38,-40,-12,68, -40,-10,-127,-97,73,49,39,127, -35,6,-69,-104,-9,-40,2,2, 
  /* [2][0][][] */ -85,9,-43,11,-51,-25,-1,-119, 42,-5,46,21,-22,-58,-2,-46, -92,13,30,-56,-56,-5,42,-127, 
  /* [3][0][][] */ -28,4,28,-89,106,-17,-33,127, -41,20,-75,-52,58,-28,-24,64, -26,30,1,-66,86,-17,33,116, 
  /* [4][0][][] */ -91,-22,-53,48,-78,-25,4,-37, -127,-20,-21,51,-42,15,10,-54, -61,20,4,-40,-61,25,-13,-77, 
  /* [5][0][][] */ -35,17,23,-16,86,-32,-15,127, -68,16,-27,-42,89,25,-23,39, -4,31,8,4,29,5,-20,43, 
  /* [6][0][][] */ 59,-4,31,55,-56,-9,14,-72, 15,-45,7,-7,-7,-2,10,-36, 4,-57,-47,95,9,13,-43,-127, 
  /* [7][0][][] */ -50,34,-24,-127,46,50,43,20, 14,36,32,104,21,36,19,-2, -22,-10,-52,-53,76,9,47,-60, 
  /* [8][0][][] */ 42,-45,49,87,42,-13,35,-65, -48,-42,-51,76,64,-13,-52,-56, -52,-37,36,55,40,27,-17,-127, 
  /* [9][0][][] */ 14,-32,94,2,-83,31,34,0, -64,-24,-27,-117,-110,27,-21,-22, -99,-39,32,30,-127,20,-30,2, 
  /* [10][0][][] */ -127,-21,-40,57,-22,-14,11,-51, -122,-38,-12,11,-38,-24,-18,-53, -74,-1,-47,58,-65,9,-5,-54, 
  /* [11][0][][] */ -13,19,26,92,-22,14,-38,-127, -44,-43,76,38,-34,-66,-9,-63, -1,-5,-57,78,-64,-62,-39,-69, 
  /* [12][0][][] */ -86,25,25,87,-36,-11,35,-127, 4,-4,-16,-28,-78,20,-42,-90, 2,21,49,38,-13,-49,-17,-53, 
  /* [13][0][][] */ -15,-12,-18,-6,-127,38,-46,-54, 48,26,-29,9,-34,-62,-48,-117, -53,8,38,24,58,-63,-58,-105, 
  /* [14][0][][] */ 18,2,22,34,-6,14,3,-127, 7,26,9,41,5,-5,14,-111, 34,-34,-11,84,20,-26,-3,-107, 
  /* [15][0][][] */ 5,24,-41,13,-33,-31,-32,-32, -52,-22,8,-34,-27,-36,11,-21, -103,-51,13,-47,-127,-2,17,6, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0029929396696388721, 0.0053034964948892593, 0.0049042082391679287, 0.006212207954376936, 0.0097425151616334915, 0.0086923521012067795, 0.0050685927271842957, 0.004698488861322403, 0.005655903834849596, 0.0047526969574391842, 0.011103743687272072, 0.0047570783644914627, 0.0062260739505290985, 0.0040511321276426315, 0.0086020538583397865, 0.0044274241663515568, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[8] = { -6189, -1770, -6951, -7285, 29717, -8418, -5099, 24354, };
const TfArray<1, int> tensor_dimension16 = { 1, { 8 } };
const TfArray<8, float> quant16_scale = { 8, { 2.5982288207160309e-05, 8.6430663941428065e-06, 1.1771935533033684e-05, 3.5430533898761496e-05, 1.9677692762343213e-05, 5.9820449678227305e-06, 6.0836791817564517e-06, 3.817319156951271e-05, } };
const TfArray<8, int> quant16_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[8*1*3*80] = { 
  /* [0][0][][] */ 76,-16,-15,-106,-69,38,14,30,55,-1,25,-102,36,15,43,-32,-73,6,-6,-17,18,-29,16,28,4,-38,-12,7,-6,-79,-113,-60,-30,-43,-31,-74,-12,-13,53,68,65,29,-33,-27,-62,-82,-45,-87,-59,1,51,13,-46,7,-7,10,39,0,-2,25,-7,17,23,41,37,44,72,56,67,-1,-20,39,30,20,44,14,42,38,50,90, 105,-45,2,-101,-12,34,19,39,26,9,-2,-88,27,-6,28,-51,-93,-8,12,-21,9,-52,1,24,-8,-50,-39,23,-30,-80,-127,-96,-42,-53,-61,-79,-28,12,53,65,49,8,-14,-29,-36,-76,-90,-96,-44,-13,42,14,-34,-22,-24,-31,28,-13,21,-16,32,5,5,54,39,69,54,78,67,13,-2,35,30,21,36,10,45,16,79,90, 85,-29,-52,-98,-8,61,59,41,57,7,26,-54,31,19,72,-56,-84,-34,12,-20,-8,-23,13,28,17,-45,-33,38,-3,-97,-81,-92,-42,-50,-41,-75,-24,-12,34,42,69,7,-6,-62,-48,-81,-86,-116,-77,18,29,16,-27,-31,-8,-30,20,-10,-19,-3,-5,13,30,26,49,61,61,63,56,27,-18,5,70,59,49,1,44,33,64,60, 
  /* [1][0][][] */ -107,-68,-15,66,-75,31,-71,64,-25,-52,-51,-68,29,-87,40,-35,-92,-61,35,30,2,-81,-22,-22,-15,-73,-92,-55,-66,-25,-32,-108,-62,-16,-37,-12,-95,-94,-51,-96,2,-58,-93,-27,-63,18,6,10,-49,-80,-65,-76,-14,-100,-107,-15,-51,-102,-83,-70,-29,-1,-100,-72,-127,-67,-49,-93,-67,6,-65,-59,-62,15,-48,-70,-84,-57,-60,-122, 30,-57,10,-24,-65,36,41,10,-83,-20,-74,39,46,-63,-30,-37,-33,26,33,-46,-53,-16,-105,-4,3,40,-66,39,-56,-89,-2,-66,-21,-115,-88,-4,-8,-48,-95,-10,-45,10,-93,-4,-10,-115,-17,-83,-64,-23,-50,-121,12,-76,-84,-79,-99,-30,-7,-74,-124,-31,-16,-67,-12,2,-114,-75,-55,-61,-59,-117,-36,-116,-77,-85,-98,-13,-105,-106, -37,4,-7,21,59,30,-68,-1,33,37,24,-37,18,3,37,5,-71,35,-54,-36,16,27,3,-82,-43,-14,-42,3,-84,-90,-64,25,-93,-62,-89,-56,-113,-4,-46,-89,-56,-12,-94,-22,-19,-87,-107,-109,-2,-77,-21,-103,-15,-99,-40,-79,-106,-78,-54,11,-46,-38,-49,-72,-125,-35,0,-60,-54,-40,10,-77,-122,0,-20,-54,-50,0,-59,-106, 
  /* [2][0][][] */ 26,13,-55,-59,-71,-59,-34,-39,-96,-61,-10,-8,100,6,-13,0,-42,-50,52,21,87,-46,-29,-41,-63,-76,-113,-123,-65,-112,-100,-46,-99,-29,-9,-86,-32,-93,-63,-80,-48,-60,-56,-82,-52,-58,-39,-84,-18,-95,-7,-100,-81,-44,-3,4,-76,-68,-5,-24,-52,-14,-51,-52,-77,-2,-74,-55,-94,-89,-77,-11,-90,-26,-62,-75,-97,-29,-104,-82, 16,-63,-67,-62,-37,-48,38,16,-49,-112,-68,19,100,71,25,-15,-115,-74,91,-43,57,-21,-67,-34,-29,-101,-67,-111,-59,-29,-45,-77,-57,-101,-29,-83,-54,-7,-82,-88,-42,-28,-95,-62,-79,-34,-73,-55,-17,-35,-66,-67,-34,-22,-63,-1,1,-13,-44,-86,-57,-85,-70,-10,-63,-47,-41,-70,-73,-88,-9,-40,-58,-37,-31,-57,-20,-88,-88,-9, -32,-18,-33,-31,-5,-47,-127,-14,-14,-57,-73,60,94,42,44,-53,-37,-9,66,-33,43,-62,-3,-35,-104,-65,-58,-118,-30,-40,-97,-43,-12,-20,-43,-84,-38,-73,-79,-54,-38,-78,-43,-23,-52,-41,-43,-14,-41,-77,-51,-77,-32,-66,-92,-39,-43,-3,-27,-51,-90,-71,-45,-75,-45,-87,-47,-108,-27,-44,-41,-29,-16,-3,-26,-1,-60,-89,-104,-60, 
  /* [3][0][][] */ 97,29,-62,-116,-34,-54,-48,-91,-32,-6,39,-2,56,21,5,49,10,-16,11,23,17,16,44,14,-55,-6,10,-15,58,41,-19,-22,-25,-39,-23,-57,-88,-86,-25,-38,-80,-91,-94,-37,-30,-20,27,4,21,24,-5,26,-9,-15,-1,62,52,15,19,-4,19,54,42,-4,-33,-55,-8,-24,37,28,26,32,18,-17,-33,-8,-9,-19,35,10, 127,33,-34,-100,-42,-25,-57,-71,-52,26,47,-4,37,19,-17,50,-7,-26,2,39,10,20,9,7,-60,-7,16,7,70,40,-4,-34,-28,-29,-36,-56,-75,-94,-19,-53,-53,-91,-90,-31,-22,-34,1,22,-2,13,1,30,-21,-6,2,74,54,9,8,-23,-6,49,52,-5,-31,-54,-23,-25,20,51,28,24,-2,-21,-35,11,-9,-24,5,8, 103,33,-85,-109,-54,-37,-61,-96,-75,6,22,15,51,34,19,60,-19,-44,13,33,13,-7,35,11,-28,-6,8,-10,55,53,-20,-33,-45,-32,-30,-46,-74,-93,-5,-42,-63,-78,-81,-62,-55,-21,-10,2,-7,30,2,1,-16,-25,-3,66,25,14,23,-8,15,35,42,-22,-29,-44,-21,-38,14,50,-8,-5,-6,-29,-14,10,-5,-17,10,24, 
  /* [4][0][][] */ -42,6,51,93,51,35,38,46,-19,-63,-62,21,-37,-55,-87,-45,-22,56,-52,-73,-82,-126,-120,-44,-43,13,10,-11,-91,-127,-108,-40,-56,-61,-69,-107,-60,-16,-31,-36,-40,-51,14,-17,0,-1,-11,-64,-35,-36,-9,-14,-8,22,-22,-63,-62,-36,-27,-26,-56,-58,-28,11,4,48,36,1,-22,-17,-64,-1,-64,-56,-16,-37,-66,-44,-88,-67, -47,-2,45,52,73,24,39,21,-5,-70,-29,5,-36,-45,-108,-56,-34,53,-31,-46,-60,-98,-106,-64,-23,-7,-9,-45,-118,-106,-85,-97,-18,-52,-115,-59,-40,-30,-30,-89,-67,-68,-42,0,1,6,-24,-90,-83,-35,-26,-57,-12,-20,-35,-83,-74,-30,-34,-50,-30,-96,-35,-4,3,55,26,37,-32,-59,-57,-42,-57,-44,-19,-32,-79,-81,-79,-74, -57,11,37,30,62,0,48,27,3,-61,-65,-38,-62,-83,-61,-75,15,44,-20,-39,-27,-67,-93,-52,31,50,39,-52,-125,-98,-104,-62,-22,-60,-74,-94,-88,-14,13,-42,-28,-32,-9,-7,56,9,-9,-42,-56,-22,27,18,15,22,17,-54,-64,-40,-36,-30,-13,-62,-72,7,12,29,20,18,-46,-5,-22,-27,-13,-33,-30,-50,-75,-84,-61,-84, 
  /* [5][0][][] */ -22,-2,-6,42,10,26,-63,-5,-22,33,-48,55,-2,31,-34,-21,-127,11,-34,50,-84,-51,61,-126,-22,-89,5,2,-100,68,-117,58,-12,-52,47,-4,-38,-76,56,-56,-106,-118,24,34,3,-53,-102,-83,-86,-78,-100,-97,-30,40,-62,-31,-27,-39,70,77,49,-65,26,44,-96,4,-88,47,8,13,-65,-35,-90,25,-75,-38,7,69,-50,-96, 47,-87,83,-2,-7,16,-22,-33,-1,78,62,12,-48,57,-70,3,48,-70,-21,-118,28,55,-93,3,-57,-67,54,32,-12,-61,-10,51,-56,-126,-88,-96,-30,-93,18,67,-30,74,-25,-103,22,61,6,-39,66,-82,7,-96,-57,-115,28,19,66,-120,-3,-93,10,-7,55,-13,-108,31,25,-102,7,-66,5,-20,46,-75,-98,42,-40,-40,49,68, -53,41,-2,-41,42,-53,69,-102,-54,-19,49,-18,-62,21,-43,65,-103,-91,30,-73,27,27,-46,-34,67,-107,16,48,-110,-8,-40,-82,-85,-56,-98,39,22,64,44,-99,-102,-65,-124,67,-112,-72,-54,-26,-81,-8,-32,30,-14,53,68,5,50,-90,-71,4,74,-28,-45,-4,22,-11,-16,7,17,75,-79,-85,3,-33,-70,-17,-116,33,66,28, 
  /* [6][0][][] */ 23,67,-8,-2,-52,-34,-33,-83,-64,-96,-85,-21,-75,-64,14,-55,-58,47,-22,-42,-63,18,-37,6,-57,-13,64,-14,1,-66,-15,-110,28,-106,-54,57,-110,53,-82,-76,-43,-112,30,12,-47,85,36,29,6,30,-58,72,-103,27,47,-73,-74,-100,46,43,-65,-119,-52,-44,-96,83,-30,29,-59,-59,47,46,-102,35,-92,50,70,32,-105,-70, -20,-61,-49,-57,-56,-95,-40,-57,92,66,-116,-110,-26,-99,-52,-75,50,-96,-5,-71,-41,-125,18,-36,-4,-21,-123,-47,-59,17,-53,-25,-40,33,-9,106,-48,-91,-117,-3,-27,-123,-53,9,-81,-63,-31,-36,-82,-95,-93,23,-15,-22,-87,0,-99,-105,53,-100,-20,58,-16,-64,-74,38,59,-50,-42,38,-89,-23,-60,1,-77,50,-87,-14,36,45, 18,-5,59,-127,-45,-69,63,-85,32,-97,-102,-46,-52,-4,53,3,-23,-122,-20,17,-60,55,53,-57,-59,17,47,-114,52,7,44,-47,55,-59,34,59,6,-57,118,44,81,62,-38,-56,50,15,-56,2,-55,20,-39,32,27,66,15,57,78,-10,-1,6,-59,-108,-35,-54,-69,-74,-50,75,54,44,-71,-42,-55,-68,-50,-58,-117,34,-22,-103, 
  /* [7][0][][] */ 6,37,99,127,119,63,70,41,-22,-41,3,10,-3,-33,-44,-36,0,48,-13,-12,-27,-29,-68,-12,29,18,7,13,-37,-20,-18,-1,-1,7,-4,-27,-4,1,14,-8,-5,-5,16,17,-3,-17,-12,-8,-9,16,30,-14,40,30,-4,-49,-35,-15,-11,1,-11,-23,-9,22,28,31,31,32,14,-18,-20,-15,-13,1,11,-18,-7,-2,-21,-22, -14,31,81,112,92,62,75,40,5,-24,4,1,-14,-15,-27,-31,2,46,2,-12,-28,-33,-44,-11,-7,20,4,4,-59,-36,-12,-2,-38,-18,-41,-22,-28,-22,6,-12,-14,-32,14,2,-2,-34,-28,-37,-8,1,6,4,3,24,6,-62,-36,-31,-12,-14,-33,-26,-46,-7,-5,19,6,11,-14,-8,-26,-26,-32,-9,-3,-28,-21,-6,-31,-31, -3,32,67,119,81,58,80,28,-7,-38,-13,0,-18,-19,-38,-45,-13,18,8,2,-20,-27,-59,-25,11,13,6,1,-47,-37,-15,-14,-4,8,-28,-25,10,4,-4,-24,15,-20,24,30,9,-3,-28,-33,-27,-11,23,17,10,10,13,-47,-31,-18,-5,-6,-5,-33,-31,11,15,13,24,26,-13,-21,-15,-26,-32,-24,-9,-46,-7,-19,-16,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 8,1,3,80 } };
const TfArray<8, float> quant17_scale = { 8, { 0.0066514657810330391, 0.0022126249969005585, 0.0030136154964566231, 0.009070216678082943, 0.0050374893471598625, 0.001531403511762619, 0.0015574218705296516, 0.0097723370417952538, } };
const TfArray<8, int> quant17_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,97,80 } };
const TfArray<1, float> quant18_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,97,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.026499515399336815, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,97,1,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.026499515399336815, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,49,1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.026499515399336815, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,49,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.026499515399336815, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,49,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.029800904914736748, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,49,1,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.029800904914736748, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.029800904914736748, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.029800904914736748, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,25,32 } };
const TfArray<1, float> quant27_scale = { 1, { 0.05495089665055275, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,25,1,32 } };
const TfArray<1, float> quant28_scale = { 1, { 0.05495089665055275, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,13,1,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.05495089665055275, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,416 } };
const TfArray<1, float> quant30_scale = { 1, { 0.05495089665055275, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,64 } };
const TfArray<1, float> quant31_scale = { 1, { 0.31355154514312744, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,2 } };
const TfArray<1, float> quant32_scale = { 1, { 0.600475013256073, } };
const TfArray<1, int> quant32_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,2 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 18 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 18,17,16 } };
const TfArray<1, int> outputs1 = { 1, { 19 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 19,2 } };
const TfArray<1, int> outputs2 = { 1, { 20 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 20 } };
const TfArray<1, int> outputs3 = { 1, { 21 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 21,3 } };
const TfArray<1, int> outputs4 = { 1, { 22 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 22,15,14 } };
const TfArray<1, int> outputs5 = { 1, { 23 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 23,4 } };
const TfArray<1, int> outputs6 = { 1, { 24 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 24 } };
const TfArray<1, int> outputs7 = { 1, { 25 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 25,5 } };
const TfArray<1, int> outputs8 = { 1, { 26 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 26,13,12 } };
const TfArray<1, int> outputs9 = { 1, { 27 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 27,6 } };
const TfArray<1, int> outputs10 = { 1, { 28 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 28 } };
const TfArray<1, int> outputs11 = { 1, { 29 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 29,7 } };
const TfArray<1, int> outputs12 = { 1, { 30 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 30,11,10 } };
const TfArray<1, int> outputs13 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata14 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs14 = { 3, { 31,9,8 } };
const TfArray<1, int> outputs14 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata15 = { 1 };
const TfArray<1, int> inputs15 = { 1, { 32 } };
const TfArray<1, int> outputs15 = { 1, { 33 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7760), (TfLiteIntArray*)&g0::tensor_dimension0, 7760, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 26624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 1920, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 7760, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8720), (TfLiteIntArray*)&g0::tensor_dimension19, 776, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 776, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension21, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension23, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension24, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 784), (TfLiteIntArray*)&g0::tensor_dimension25, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension26, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension27, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension29, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 416), (TfLiteIntArray*)&g0::tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension32, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension33, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[16] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[16] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 34, };
const size_t tflNodes_subgraph_index[] = {0, 16, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  33, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 34;
  for (size_t i = 0; i < 34; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 16; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
